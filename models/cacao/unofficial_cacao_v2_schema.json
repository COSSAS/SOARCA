{
    "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/playbook.json",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "playbook",
    "description": "CACAO playbooks are made up of five parts; playbook metadata, the workflow logic, a list of agents, a list of extensions, and a list of data markings. Playbooks MAY refer to other playbooks in the workflow, similar to how programs refer to function calls or modules that comprise the program. The definition and normative requirements for all data types listed in the property table below and other property tables in this document can be found in Section 9.",
    "type": "object",
    "properties": {
      "type": {
        "type": "string",
        "description": "The value of this property MUST be 'playbook'. See section 1.2 and section 1.3 for more information.",
        "enum": ["playbook"]
      },
      "spec_version": {
        "type": "string",
        "description": "The version of the specification used to represent this playbook. The value of this property MUST be 'cacao-2.0' to represent the version of this specification.",
        "enum": ["cacao-2.0"]
      },
      "id": {
        "$ref": "#/$defs/data-types/identifier",
        "description": "A value that uniquely identifies the playbook. All playbooks with the same id are considered different versions of the same playbook and the version of the playbook is identified by its modified property."
      },
      "name": {
        "type": "string",
        "description": "A simple name for this playbook. Playbook names often follow a naming convention that is unique within an organization, community, or trust group and as such this name SHOULD be unique."
      },
      "description": {
        "type": "string",
        "description": "More details, context, and possibly an explanation about what this playbook does and tries to accomplish. Producers SHOULD populate this property."
      },
      "playbook_types": {
        "type": "array",
        "description": "A list of playbook types that specifies the operational roles that this playbook addresses. This property SHOULD be populated. \n\nThe values for this property MUST come from the 'playbook-type-enum' enumeration (see section 3.1.1).",
        "items": {
          "$ref": "#/$defs/enums/playbook-type-enum"
        }
      },
      "playbook_activities": {
        "type": "array",
        "description": "A list of activities pertaining to the playbook. This property SHOULD be populated. If the playbook_types property is populated then this property MUST have at least one assigned activity. \n\nThis property allows an author to define more detailed descriptions for the various activities that playbook performs. This property provides a much richer and verbose method to describe all aspects of a playbook than just the playbook_types property. \n\nThe values for this property SHOULD come from the 'playbook-activity-type-ov' vocabulary (see section 3.1.2). \n\nEach listed activity MUST be reflected in a CACAO workflow step object and that object MUST be included in the workflow property.",
        "items": {
          "$ref": "#/$defs/ovs/playbook-activity-type-ov"
        },
        "minItems": 1
      },
      "playbook_complexity": {
        "$ref": "#/$defs/data-types/playbook-complexity",
        "description": "This property contains a summarized list of features that are defined within this playbook. This property enables the content of a playbook to be assessed without requiring the entire content to be parsed or understood. See section 9.5."
      },
      "created_by": {
        "$ref": "#/$defs/data-types/identifier",
        "description": "An ID that represents the entity that created this playbook. The ID MUST represent a STIX 2.1+ identity object."
      },
      "created": {
        "$ref": "#/$defs/data-types/timestamp",
        "description": "The time at which this playbook was originally created. The creator can use any time it deems most appropriate as the time the playbook was created, but it MUST be given to the nearest millisecond (exactly three digits after the decimal place in seconds). The created property MUST NOT be changed when creating a new version of the object."
      },
      "modified": {
        "$ref": "#/$defs/data-types/timestamp",
        "description": "The time that this particular version of the playbook was last modified. The creator can use any time it deems most appropriate as the time that this version of the playbook was modified, but it MUST be given to the nearest millisecond (exactly three digits after the decimal place in seconds). The modified property MUST be later than or equal to the value of the created property. If created and modified properties are the same, then this is the first version of the playbook."
      },
      "revoked": {
        "type": "boolean",
        "description": "A boolean that identifies if the playbook creator deems that this playbook is no longer valid. The default value is 'false'."
      },
      "valid_from": {
        "$ref": "#/$defs/data-types/timestamp",
        "description": "The time from which this playbook is considered valid and the workflow steps that it contains can be executed. More detailed information about time frames MAY be applied in the workflow. \n\nIf omitted, the playbook is valid at all times or until the timestamp defined by 'valid_until'. \n\nIf the revoked property is 'true' then this property MUST be ignored."
      },
      "valid_until": {
        "$ref": "#/$defs/data-types/timestamp",
        "description": "The time at which this playbook should no longer be considered a valid playbook to be executed. \n\nIf the valid_until property is omitted, then there is no constraint on the latest time for which the playbook is valid. \n\nThis property MUST be greater than the timestamp in the valid_from property if the valid_from property is defined. \n\nIf the revoked property is true then this property MUST be ignored."
      },
      "derived_from": {
        "type": "array",
        "description": "The ID of one or more playbooks that this playbook was derived from. \n\nThe ID MUST represent a CACAO playbook object.",
        "items": {
          "$ref": "#/$defs/data-types/identifier"
        },
        "minItems": 1
      },
      "priority": {
        "type": "integer",
        "minimum": 0,
        "maximum": 100,
        "description": "A number (ùïé - whole number) that represents the priority of this playbook relative to other defined playbooks. \n\nPriority in the context of CACAO is a subjective assessment; thus, producers of playbooks, sharing organizations, and marketplaces MAY define rules on how priority should be assessed and assigned. This specification does not address how this assessment is determined. This property is primarily to allow such usage without requiring the addition of a custom property for such practices. \n\nIf specified, the value of this property MUST be between 0 and 100. \n\nWhen left blank this means unspecified. A value of 0 means specifically undefined. Values range from 1, the highest priority, to a value of 100, the lowest. \n\nThe values of 1-100 in this property are inverted from severity and impact based on how the concept of priority is used today. For example, in a SOC a P1 ticket is higher priority than a P4 ticket."
      },
      "severity": {
        "type": "integer",
        "minimum": 0,
        "maximum": 100,
        "description": "A number (ùïé - whole number) that represents the seriousness of the conditions that this playbook addresses. This is highly dependent on whether the playbook is a response to an incident (in which case the severity could be mapped to an incident category defined in some solution), a response to a threat (in which case the severity would likely be mapped to the severity of the threat faced or captured by threat intelligence), or a response to something else. \n\nMarketplaces and sharing organizations MAY define additional rules for how this property should be assigned. This specification does not address how this assessment is determined. \n\nIf specified, the value of this property MUST be between 0 and 100. \n\nWhen left blank this means unspecified. A value of 0 means specifically undefined. Values range from 1, the lowest severity, to a value of 100, the highest."
      },
      "impact": {
        "type": "integer",
        "minimum": 0,
        "maximum": 100,
        "description": "A number (ùïé - whole number) from 0 to 100 that represents the potential impact (as determined subjectively by the producer) of the playbook's execution on the organization. \n\nIf specified, the value of this property MUST be between 0 and 100. When left blank this means unspecified. A value of 0 means specifically undefined or benign. Impact values range from 1, the lowest impact, to a value of 100, the highest. \n\nMarketplaces and sharing organizations MAY define additional rules for how this property should be assigned. This specification does not address how this assessment is determined. \n\nNOTE: The value of this property is not related to what triggered the playbook in the first place, such as a threat or an incident. \n\nExecuting a playbook with a higher impact score may increase the likelihood of an effect on the organization. For example, a purely investigative playbook that is non-invasive could have a low impact value of 1. In contrast, a playbook that performs firewall changes, IPS changes, moves laptops to a quarantine VLAN etc., would have a higher impact value."
      },
      "industry_sectors": {
        "type": "array",
        "description": "A list of industry sectors that this playbook is applied to. \n\nAny industry sectors that are used in other parts of this playbook MUST also be included in this property. Any industry sectors that are used in other referenced playbooks MAY also be included in this property. \n\nThe values for this property SHOULD come from the 'industry-sector-ov' vocabulary.",
        "items": {
          "$ref": "#/$defs/ovs/industry-sector-ov"
        },
        "minItems": 1
      },
      "labels": {
        "type": "array",
        "description": "An optional set of terms, labels, or tags associated with this playbook. The values may be user, organization, or trust-group defined and their meaning is outside the scope of this specification.",
        "items": {
          "type": "string"
        },
        "minItems": 1
      },
      "external_references": {
        "type": "array",
        "description": "An optional list of external references for this playbook or content found in this playbook. \n\nAny external references that are used in other parts of this playbook MUST also be included in this property. Any external references that are used in other referenced playbooks MAY also be included in this property.",
        "items": {
          "$ref": "#/$defs/data-types/external-reference"
        },
        "minItems": 1
      },
      "markings": {
        "type": "array",
        "description": "An optional list of data marking objects that apply to this playbook. In some cases, though uncommon, data markings themselves may be marked with sharing or handling guidance. In this case, this property MUST NOT contain any references to the same data marking object (i.e., it cannot contain any circular references). \n\nEach ID MUST represent a CACAO data marking object.",
        "items": {
          "$ref": "#/$defs/data-types/identifier"
        },
        "minItems": 1
      },
      "playbook_variables": {
        "type": "object",
        "unevaluatedProperties": false,
        "description": "This property contains the global variables (see section 9.16.1 for information about variable scope) that can be used within this playbook or within workflow steps, commands, and agents defined within this playbook. See section 9.16 for information about referencing variables. \n\nThe key for each entry in the dictionary MUST be a string that uniquely identifies the variable. The value for each key MUST be a CACAO variable data type (see section 9.16).",
        "patternProperties": {
          "^__[a-zA-Z_][a-zA-Z0-9_-]{0,199}__$": {
            "$ref": "#/$defs/data-types/variable"
          }
        }
      },
      "workflow_start": {
        "$ref": "#/$defs/data-types/identifier",
        "description": "The first workflow step included in the workflow property that MUST be executed when starting the workflow. \n\nThe ID MUST represent a CACAO workflow 'start' step object and that object MUST be included in the workflow property. This property is an implementation helper, so that the entire workflow does not need to be parsed to find the start step."
      },
      "workflow_exception": {
        "$ref": "#/$defs/data-types/identifier",
        "description": "The workflow step invoked whenever a playbook exception condition occurs. \n\nIf defined, the ID MUST represent a CACAO workflow step object and that object MUST be included in the workflow property."
      },
      "workflow": {
        "description": "The workflow property contains the processing logic for the playbook as workflow steps. All playbooks MUST contain at least the following three steps: a 'start' step, an 'action'/'playbook-action' step, and an 'end' step. \n\nThe key for each entry in the dictionary MUST be an 'identifier' that uniquely identifies the workflow step (see section 9.10 for more information on identifiers). The value for each key MUST be a CACAO workflow step object (see section 4).",
        "type": "object",
        "unevaluatedProperties": false,
        "patternProperties": {
          "^action--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/workflows/action"
          },
          "^end--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/workflows/end"
          },
          "^if-condition--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/workflows/if-condition"
          },
          "^parallel--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/workflows/parallel"
          },
          "^playbook-action--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/workflows/playbook-action"
          },
          "^start--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/workflows/start"
          },
          "^switch-condition--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/workflows/switch-condition"
          },
          "^while-condition--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/workflows/while-condition"
          }
        }
      },
      "agent_definitions": {
        "minProperties": 1,
        "type": "object",
        "unevaluatedProperties": false,
        "patternProperties": {
          "^group--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/group"
          },
          "^http-api--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/http-api"
          },
          "^individual--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/individual"
          },
          "^linux--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/linux"
          },
          "^location--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/location"
          },
          "^net-address--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/net-address"
          },
          "^organization--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/organization"
          },
          "^sector--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/sector"
          },
          "^security-category--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/security-category"
          },
          "^ssh--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/ssh"
          },
          "^[a-z]([-a-z]*[a-z])?--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/agent-target"
          }
        },
        "description": "A dictionary of agents that can be referenced from workflow steps found in the workflow property. \n\nThe key for each entry in the dictionary MUST be an identifier that uniquely 'identifies' the agent (see section 9.10 for more information on identifiers). The value for each key MUST be a CACAO 'agent-target' object (see section 6). \n\nAny agents that are used in other parts of this playbook MUST also be included in this property. Any agents that are used in other referenced playbooks MAY also be included in this property."
      },
      "target_definitions": {
        "minProperties": 1,
        "type": "object",
        "unevaluatedProperties": false,
        "patternProperties": {
          "^group--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/group"
          },
          "^http-api--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/http-api"
          },
          "^individual--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/individual"
          },
          "^linux--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/linux"
          },
          "^location--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/location"
          },
          "^net-address--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/net-address"
          },
          "^organization--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/organization"
          },
          "^sector--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/sector"
          },
          "^security-category--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/security-category"
          },
          "^ssh--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/ssh"
          },
          "^[a-z]([-a-z]*[a-z])?--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/agent-target/agent-target"
          }
        },
        "description": "A dictionary of targets that can be referenced from workflow steps found in the workflow property. \n\nThe key for each entry in the dictionary MUST be an identifier that uniquely 'identifies' the target (see section 9.10 for more information on identifiers). The value for each key MUST be a CACAO 'agent-target' object (see section 6). \n\nAny targets that are used in other parts of this playbook MUST also be included in this property. Any agents that are used in other referenced playbooks MAY also be included in this property."
      },
      "extension_definitions": {
        "type": "object",
        "unevaluatedProperties": false,
        "patternProperties": {
          "^extension-definition--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/extension-definition/extension-definition"
          }
        },
        "description": "A dictionary of extension definitions that are referenced from workflow steps found in the workflow property. \n\nThe key for each entry in the dictionary MUST be an 'identifier' that uniquely identifies the extension (see section 9.10 for more information on identifiers). The value for each key MUST be a CACAO extension object (see section 7). \n\nAny extensions that are used in other parts of this playbook MUST also be included in this property. Any extensions that are used in other referenced playbooks MAY also be included in this property."
      },
      "data_marking_definitions": {
        "type": "object",
        "unevaluatedProperties": false,
        "description": "A dictionary of data marking definitions that can be referenced from the playbook found in the markings property. \n\nThe key for each entry in the dictionary MUST be an 'identifier' that uniquely identifies the data marking (see section 9.10 for more information on identifiers). The value for each key MUST be a CACAO data marking object (see section 8). \n\nAny data markings that are used in other parts of this playbook MUST also be included in this property. Any data markings that are used in other referenced playbooks MAY also be included in this property.",
        "patternProperties": {
          "^marking-tlp--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/data-markings/marking-tlp"
          },
          "^marking-iep--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/data-markings/marking-iep"
          },
          "^marking-statement--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
            "$ref": "#/$defs/data-markings/marking-statement"
          }
        }
      },
      "signatures": {
        "type": "array",
        "description": "An optional list of digital signatures for this playbook. Adding a signature to a playbook does not represent a version change of the playbook. See sections 2.5, 9.13, and A.3 in the appendix for more information and a detailed example.",
        "items": {
          "$ref": "#/$defs/data-types/signature"
        },
        "minItems": 1
      }
    },
    "required": [
      "type",
      "spec_version",
      "id",
      "name",
      "created_by",
      "created",
      "modified",
      "workflow_start",
      "workflow"
    ],
    "unevaluatedProperties": false,
    "$defs": {
      "ovs": {
        "playbook-activity-type-ov": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "compose-content",
                "deliver-content",
                "identify-audience",
                "identify-channel",
                "scan-system",
                "match-indicator",
                "analyze-collected-data",
                "identify-indicators",
                "scan-vulnerabilities",
                "configure-systems",
                "restrict-access",
                "disconnect-system",
                "eliminate-risk",
                "revert-system",
                "restore-data",
                "restore-capabilities",
                "map-network",
                "identify-steps",
                "step-sequence",
                "prepare-engagement",
                "execute-operation",
                "analyze-engagement-results"
              ]
            }
          ]
        },
        "industry-sector-ov": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "aerospace",
                "aviation",
                "agriculture",
                "automotive",
                "biotechnology",
                "chemical",
                "commercial",
                "consulting",
                "construction",
                "cosmetics",
                "critical-infrastructure",
                "dams",
                "defense",
                "education",
                "emergency-services",
                "energy",
                "non-renewable-energy",
                "renewable-energy",
                "media",
                "financial",
                "food",
                "gambling",
                "government",
                "local-government",
                "national-government",
                "regional-government",
                "public-services",
                "healthcare",
                "information-communications-technology",
                "electronics-hardware",
                "software",
                "telecommunications",
                "legal-services",
                "lodging",
                "manufacturing",
                "maritime",
                "metals",
                "mining",
                "non-profit",
                "humanitarian-aid",
                "human-rights",
                "nuclear",
                "petroleum",
                "pharmaceuticals",
                "research",
                "transportation",
                "logistics-shipping",
                "utilities",
                "video-game",
                "water"
              ]
            }
          ]
        },
        "security-category-type-ov": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "aaa",
                "analytics",
                "caldera",
                "content-gateway",
                "desktop",
                "endpoint",
                "firewall",
                "handset",
                "ids",
                "ips",
                "kali",
                "manx",
                "orchestrator",
                "os-linux",
                "os-mac",
                "os-windows",
                "redcanary-atomicred",
                "ragdoll",
                "router",
                "sandcat",
                "server",
                "siem",
                "switch",
                "ticketing",
                "tip",
                "wireless"
              ]
            }
          ]
        },
        "command-type-ov": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "manual",
                "bash",
                "http-api",
                "ssh",
                "caldera-cmd",
                "elastic",
                "jupyter",
                "kestrel",
                "openc2-json",
                "sigma",
                "yara"
              ]
            }
          ]
        },
        "agent-target-type-ov": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "group",
                "individual",
                "location",
                "organization",
                "sector",
                "http-api",
                "linux",
                "net-address",
                "security-category",
                "ssh"
              ]
            }
          ]
        },
        "variable-type-ov": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "string",
            "enum": [
                "bool",
                "dictionary",
                "float",
                "hexstring",
                "integer",
                "ipv4-addr",
                "ipv6-addr",
                "long",
                "mac-addr",
                "hash",
                "md5-hash",
                "sha256-hash",
                "string",
                "uri",
                "uuid"
              ]
            }
          ]
        },
        "signature-algorithm-type-ov": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "string",
              "enum": [
                "RS256",
                "RS384",
                "RS512",
                "ES256",
                "ES384",
                "ES512",
                "PS256",
                "PS384",
                "PS512",
                "Ed25519",
                "Ed448"
              ]
            }
          ]
        }
      },
      "enums": {
        "playbook-type-enum": {
          "type": "string",
          "enum": [
            "attack",
            "detection",
            "engagement",
            "investigation",
            "mitigation",
            "notification",
            "prevention",
            "remediation"
          ]
        },
        "workflow-step-type-enum": {
          "type": "string",
          "enum": [
            "start",
            "end",
            "action",
            "playbook-action",
            "parallel",
            "if-condition",
            "while-condition",
            "switch-condition"
          ]
        },
        "data-marking-type-enum": {
          "type": "string",
          "enum": [
            "marking-statement",
            "marking-tlp",
            "marking-iep"
          ]
        },
        "region-enum": {
          "type": "string",
          "enum": [
            "africa",
            "eastern-africa",
            "middle-africa",
            "northern-africa",
            "southern-africa",
            "western-africa",
            "americas",
            "caribbean",
            "central-america",
            "latin-america-caribbean",
            "northern-america",
            "south-america",
            "asia",
            "central-asia",
            "eastern-asia",
            "southern-asia",
            "south-eastern-asia",
            "western-asia",
            "europe",
            "eastern-europe",
            "northern-europe",
            "southern-europe",
            "western-europe",
            "oceania",
            "antarctica",
            "australia-new-zealand",
            "melanesia",
            "micronesia",
            "polynesia"
          ]
        }
      },
      "data-types": {
        "identifier": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/data-types/identifier.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "identifier",
          "description": "The 'identifier' data type represents an RFC 4122-compliant UUID [RFC4122] and uses the JSON string type [RFC8259] for serialization. An identifier uniquely identifies a CACAO object. All identifiers MUST follow the form object-type--UUID, where object-type is the exact value (all type names are lowercase strings by definition) from the type property of the object being identified and where the UUID MUST be an RFC 4122-compliant UUID [RFC4122]. The UUID part of the identifier MUST be unique across all objects regardless of the type identified by the object-type prefix. Meaning, a producer MUST NOT reuse the UUID portion of the identifier for objects of different types. All CACAO objects SHOULD use UUIDv4 for the UUID portion of the identifier. A CACAO 'playbook' object MAY use UUIDv5 for the UUID portion of the identifier. All CACAO 'step' objects MUST use UUIDv4.",
          "type": "string",
          "pattern": "^[a-z][a-z0-9-]+[a-z0-9]--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
        },
        "playbook-complexity": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/data-types/playbook-complexity.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "playbook-complexity",
          "description": "The 'playbook-complexity' data type represents the major features and functionality of a playbook. This data type contains a summarized list of features that can be implemented for a specific playbook and is used at playbook metadata level. This is done to help implementations understand the concepts and features used within a specific playbook without having to parse the entire playbook.",
          "type": "object",
          "properties": {
            "manual_playbook": {
            "type": "boolean",
            "description": "This type of playbook contains only manual commands and simple text based descriptions or tasks."
            },
            "external_playbooks": {
            "type": "boolean",
            "description": "See section 4.6."
            },
            "parallel_processing": {
            "type": "boolean",
            "description": "See section 4.7."
            },
            "if_logic": {
            "type": "boolean",
            "description": "See section 4.8."
            },
            "while_logic": {
            "type": "boolean",
            "description": "See section 4.9."
            },
            "switch_logic": {
            "type": "boolean",
            "description": "See section 4.10."
            },
            "temporal_logic": {
            "type": "boolean",
            "description": "See section 4.1 'delay' and 'timeout' properties."
            },
            "data_markings": {
            "type": "boolean",
            "description": "See section 2.4 and section 8."
            },
            "extensions": {
            "type": "boolean",
            "description": "See section 7."
            }
          },
          "unevaluatedProperties": false
        },
        "timestamp": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/data-types/timestamp.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "timestamp",
          "description": "The 'timestamp' data type represents dates and times and uses the JSON string type [RFC8259] for serialization. The timestamp data MUST be a valid RFC 3339-formatted timestamp [RFC3339] using the format yyyy-mm-ddThh:mm:ss[.s+]Z where the 's+' represents 1 or more sub-second values. The brackets denote that sub-second precision is optional, and that if no digits are provided, the decimal place MUST NOT be present. The timestamp MUST be represented in the UTC+0 timezone and MUST use the 'Z' designation to indicate this.",
          "type": "string",
          "pattern": "^[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\\.[0-9]+)?Z$"
        },
        "civic-location": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/data-types/civic-location.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "civic-location",
          "description": "The 'civic-location' data type captures civic location information and uses the JSON object type [RFC8259] for serialization. Implementations need to be mindful when including physical address information and GPS information into the same civic location to ensure that they reference the same actual physical location. However, in the event that the physical address information and the GPS information do not match, then the physical address information SHOULD be considered correct.",
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "A name for this location."
            },
            "description": {
              "type": "string",
              "description": "A detailed description about this location."
            },
            "building_details": {
              "type": "string",
              "description": "Additional details about the location within a building including things like floor, room, etc."
            },
            "network_details": {
              "type": "string",
              "description": "Additional details about this network location including things like wiring closet, rack number, rack location, and VLANs."
            },
            "region": {
              "$ref": "#/$defs/enums/region-enum",
              "description": "The geographical region for this location. \n\nThe value for this property MUST come from the region-enum enumeration (see section 9.3.1)."
            },
            "country": {
              "type": "string",
              "description": "The country for this location. This property MUST contain a valid ISO 3166-1 ALPHA-2 Code [ISO3166-1]."
            },
            "administrative_area": {
              "type": "string",
              "description": "The state, province, or other sub-national administrative area for this location. \n\nThis property SHOULD contain a valid ISO 3166-2 Code [ISO3166-2]."
            },
            "city": {
              "type": "string",
              "description": "The city for this location."
            },
            "street_address": {
              "type": "string",
              "description": "The street address for this location. This property includes all aspects or parts of the street address. For example, some addresses may have multiple lines including a mailstop or apartment number."
            },
            "postal_code": {
              "type": "string",
              "description": "The postal code for this location."
            },
            "latitude": {
              "type": "string",
              "description": "The GPS latitude of the location in decimal degrees. Positive numbers describe latitudes north of the equator, and negative numbers describe latitudes south of the equator. The value of this property MUST be less than or equal to 90.0 and greater than -90.0 (i.e., 90.0 >= x > -90.0). If the longitude property is present, this property MUST be present. NOTE: Some systems like Google Maps have the following rules. 'Latitude ranges between -90 and 90 degrees, inclusive. Values above or below this range will be clamped to the range [-90, 90]. This means that if the value specified is less than -90, it will be set to -90. And if the value is greater than 90, it will be set to 90.' [Google Maps]"
            },
            "longitude": {
              "type": "string",
              "description": "The GPS longitude of the location in decimal degrees. Positive numbers describe longitudes east of the prime meridian and negative numbers describe longitudes west of the prime meridian. The value of this property MUST be less than or equal to 180.0 and a value that is greater than -180.0 (i.e., 180.0 >= x > -180.0). If the latitude property is present, this property MUST be present. NOTE: Some systems like Google Maps have the following rules. 'Longitude ranges between -180 and 180 degrees, inclusive. Values above or below this range will be wrapped so that they fall within the range. For example, a value of -190 will be converted to 170. A value of 190 will be converted to -170. This reflects the fact that longitudes wrap around the globe.' [Google Maps]"
            },
            "precision": {
              "type": "string",
              "description": "Defines the precision of the coordinates specified by the 'latitude' and 'longitude' properties. This is measured in meters. The actual agent may be anywhere up to precision meters from the defined point. If this property is not present, then the precision is unspecified. If this property is present, the 'latitude' and 'longitude' properties MUST be present."
            }
          },
          "unevaluatedProperties": false
        },
        "contact": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/data-types/contact.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "contact",
          "description": "The 'contact' information data type captures general contact information and uses the JSON object type [RFC8259] for serialization.",
          "type": "object",
          "properties": {
            "email": {
              "type": "object",
              "unevaluatedProperties": false,
              "patternProperties": {
                "^[a-zA-Z0-9_-]{0,250}$": {
                "type": "string"
                }
              },
              "description": "An email address for this contact. The key for each entry in the dictionary MUST be a 'string' that uniquely identifies the contact type (e.g., the keys could be things like 'work', 'home', 'personal', etc). The value for each key MUST be a 'string'."
            },
            "phone": {
              "type": "object",
              "unevaluatedProperties": false,
              "patternProperties": {
                "^[a-zA-Z0-9_-]{0,250}$": {
                "type": "string"
                }
              },
              "description": "A phone number for this contact. The key for each entry in the dictionary MUST be a 'string' that uniquely identifies the type (e.g., the keys could be things like 'work', 'home', 'personal', etc). The value for each key MUST be a 'string'."
            },
            "contact_details": {
              "type": "string",
              "description": "Additional contact information."
            }
          },
          "unevaluatedProperties": false
        },
        "dictionary": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/data-types/dictionary.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "dictionary",
          "description": "The 'dictionary' data type captures an arbitrary set of key/value pairs and uses the JSON object type [RFC8259] for serialization. ",
          "type": "object",
          "unevaluatedProperties": false,
          "patternProperties": {
            "^[a-zA-Z0-9_-]{0,250}$": {}
          }
        },
        "external-reference": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/data-types/external-reference.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "external-reference",
          "description": "The 'external-reference' data type captures the location of information represented outside of a CACAO playbook and uses the JSON object type [RFC8259] for serialization. For example, a playbook could reference external documentation about a specific piece of malware that the playbook is trying to address. In addition to the name properties at least one of the following properties MUST be present: 'description', 'source', 'url', 'external_id', or 'reference_id'.",
          "type": "object",
          "properties": {
            "name": {
            "type": "string",
            "description": "The name of the author or title of the source of this external reference."
            },
            "description": {
            "type": "string",
            "description": "A detailed description of this external reference."
            },
            "source": {
            "type": "string",
            "description": "A textual citation of this source. The citation source MAY use a standard citation format like Chicago, MLA, APA, or similar style."
            },
            "url": {
            "type": "string",
            "description": "A URL [RFC3986] for this external reference."
            },
            "external_id": {
            "type": "string",
            "description": "An identifier used by the source to reference this content. Some organizations give names or numbers to content that they publish. This property would capture that information to help ensure that a consumer is being referred to the correct content."
            },
            "reference_id": {
            "type": "string",
            "description": "An identifier that represents the data that this content is referring to. This property is especially useful when referencing content that already exists in a graph dataset or can be referenced via some ID. When referencing STIX content, this would be the STIX based UUID."
            }
          },
          "unevaluatedProperties": false
        },
        "signature": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/data-types/signature.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "signature",
          "description": "The 'signature' data type captures the actual digital signature and meta-data about the signature and uses the JSON object type [RFC8259] for serialization. See section A.3 in the appendix for a detailed example. \n\n* One of the following properties MUST be populated, 'public_key' (preferred), 'public_cert_chain', 'cert_url', or 'thumbprint'.",
          "type": "object",
          "properties": {
            "type": {
            "type": "string",
            "description": "The value of this property MUST be 'jss'.",
            "enum": [
                "jss"
              ]
            },
            "id": {
              "$ref": "#/$defs/data-types/identifier",
              "description": "A value that uniquely identifies the signature. All signatures with the same ID are considered different versions of the same signature and the version of the signature is identified by its 'modified' property."
            },
            "created_by": {
              "$ref": "#/$defs/data-types/identifier",
              "description": "An ID that represents the entity that created this signature. The ID MUST represent a STIX 2.1+ identity object."
            },
            "created": {
              "$ref": "#/$defs/data-types/timestamp",
              "description": "The time at which this signature was originally created. The creator can use any time it deems most appropriate as the time the signature was created, but it MUST be precise to the nearest millisecond (exactly three digits after the decimal place in seconds). The created property MUST NOT be changed when creating a new version of the object."
            },
            "modified": {
              "$ref": "#/$defs/data-types/timestamp",
              "description": "The time that this particular version of the signature was last modified. The creator can use any time it deems most appropriate as the time that this version of the signature was modified, but it MUST be precise to the nearest millisecond (exactly three digits after the decimal place in seconds). The modified property MUST be later than or equal to the value of the created property. If the 'created' and 'modified' properties are the same, then this is the first version of the signature."
            },
            "revoked": {
              "type": "boolean",
              "description": "A boolean that identifies if the signature creator deems that this signature is no longer valid. The default value is 'false'."
            },
            "signee": {
              "type": "string",
              "description": "The name of the entity or organization that produced this signature. This property is similar to the X.509 fields."
            },
            "valid_from": {
              "$ref": "#/$defs/data-types/timestamp",
              "description": "The time from which this signature is considered valid. \n\nIf omitted, the signature is valid at all times or until the timestamp defined by 'valid_until'. If the 'revoked' property is true then this property MUST be ignored."
            },
            "valid_until": {
              "$ref": "#/$defs/data-types/timestamp",
              "description": "The time at which this signature should no longer be considered valid. \n\nIf the 'valid_until' property is omitted, then there is no constraint on the latest time for which the signature is valid. \n\nThis property MUST be greater than the timestamp in the 'valid_from' property if the 'valid_from' property is defined. If the 'revoked' property is true then this property MUST be ignored."
            },
            "related_to": {
              "$ref": "#/$defs/data-types/identifier",
              "description": "The CACAO playbook that this signature is for. The value of this property MUST be a CACAO playbook id. If the signature is detached from the original playbook then this property MUST be populated."
            },
            "related_version": {
              "$ref": "#/$defs/data-types/timestamp",
              "description": "The version of the CACAO playbook that this signature is for. \n\nThe value of this property MUST be the modified 'timestamp' from the CACAO playbook that this signature is for."
            },
            "hash_algorithm": {
              "type": "string",
              "description": "The hashing algorithm used on the JCS version of the full playbook with the signature object as defined by IANA and is a case-sensitive ASCII string. As of this writing, implementations SHOULD use 'sha-256' but MAY use any current and widely accepted algorithm that is defined in the IANA registry. The actual signing process uses an algorithm, defined in the algorithm property, that may define an internal hashing function, this property MAY use the same hashing algorithm as the signing process or MAY use something else."
            },
            "algorithm": {
              "$ref": "#/$defs/ovs/signature-algorithm-type-ov",
              "description": "This property identifies the algorithm that was used to sign the playbook and is a case-sensitive ASCII string. \n\nThe value for this property MUST come from the 'signature-algorithm-type-enum' enumeration."
            },
            "public_key": {
              "type": "string",
              "description": "This property contains a PEM encoded PKCS#1 public key without the header and footer."
            },
            "public_cert_chain": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "minItems": 1,
              "description": "This property contains a public key certificate and MUST follow the requirements defined in section 4.7 of [RFC7517] as quoted here. This property 'contains a chain (X.509 certificate chain) of one or more PKIX certificates [RFC5280]. The certificate chain is represented as a JSON array of certificate value strings. Each string in the array is a base64-encoded (Section 4 of [RFC4648] -- not base64URL.encoded) DER [ITU.X690.1994] PKIX certificate value. The PKIX certificate containing the key value MUST be the first certificate. This MAY be followed by additional certificates, with each subsequent certificate being the one used to certify the previous one. The key in the first certificate MUST match the public key.' This property is called 'x5c' in section 4.7 of [RFC7517]."
            },
            "cert_url": {
              "type": "string",
              "description": "This property contains a URI [RFC3986] that refers to a resource for an X.509 public key certificate or certificate chain [RFC5280] and MUST follow the requirements defined in section 4.6 of [RFC7517] as quoted here. 'The identified resource MUST provide a representation of the certificate or certificate chain that conforms to RFC 5280 [RFC5280] in PEM-encoded form, with each certificate delimited as specified in section 6.1 of RFC 4945 [RFC4945]. The key in the first certificate MUST match the public key. The protocol used to acquire the resource MUST provide integrity protection; an HTTP GET request to retrieve the certificate MUST use TLS [RFC2818] [RFC5246]; the identity of the server MUST be validated, as per section 6 of RFC 6125 [RFC6125].' This property is called 'x5u' in section 4.6 of [RFC7517]."
            },
            "thumbprint": {
              "type": "string",
              "description": "This property contains a fingerprint of a public key or public key certificate and SHOULD follow the requirements defined in section 4.9 of [RFC7517] as quoted here. This property 'is a base64URL.encoded SHA-256 thumbprint (a.k.a. digest, X.509 certificate SHA-256 thumbprint) of the DER encoding of an X.509 certificate [RFC5280]. Note that certificate thumbprints are also sometimes known as certificate fingerprints. The key in the certificate MUST match the public key.' This property is called 'x5t#S256' in section 4.9 of [RFC7517]."
            },
            "value": {
              "type": "string",
              "description": "A base64URL.encoded signature that was created using the signature algorithm defined in the 'algorithm' property and a key. In pseudo code it is defined as: base64URL.encode(sign(algorithm, key, hash(jcs(<JSONObject with Signature Object>))))"
            },
            "signature": {
              "$ref": "#/$defs/data-types/signature",
              "description": "This property enables a signature chain, meaning a signature can be signed by another signature."
            }
          },
          "required": [
            "type",
            "id",
            "created",
            "modified",
            "signee",
            "related_to",
            "related_version",
            "hash_algorithm",
            "algorithm",
            "value"
          ],
          "oneOf": [
            {
              "required": ["public_key"]
            },
            {
              "required": ["public_cert_chain"]
            },
            {
              "required": ["cert_url"]
            },
            {
              "required": ["thumbprint"]
            }
          ],
          "unevaluatedProperties": false
        },
        "variable": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/data-types/variable.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "variable",
          "description": "Variables can be defined and then used as the playbook is executed. Variables are stored in a 'dictionary' where the key is the name of the variable and the value is a 'variable' data type. Variables can represent stateful elements that may need to be captured to allow for the successful execution of the playbook. All playbook variables are mutable unless identified as a constant. The scope of a variable is determined by where the variable is declared. A variable may be defined globally for the entire playbook or locally within a workflow step. Variables are scoped to the object they are defined in, and any object that is used or referenced by that object. A specific variable can only be defined once, however, a variable can be assigned and used in the object where it is defined or in any object used or referenced by that object (e.g., a playbook variable can be assigned at the playbook level but also reassigned a different value within a workflow step). Variables are referenced by using the key name from the dictionary with a suffix (keyword) of ':value'. For example, if you had a variable in the dictionary called '__ip_addresses__', one could reference this and use it in a playbook by using '__ip_addresses__:value'. Variables MAY be passed to and from external playbooks provided that system supports passing of arguments when the system function is invoked or returns its results.",
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/$defs/ovs/variable-type-ov",
              "description": "The type of variable being used. The value for this property SHOULD come from the 'variable-type-ov' vocabulary."
            },
            "description": {
              "type": "string",
              "description": "An optional detailed description of this variable."
            },
            "value": {
              "type": [
                "string",
                "null"
              ],
              "description": "The value of the variable represented by a JSON string. The value MAY be populated with a string value (or number encoded as a string), an empty string '', or with the special JSON NULL value. \n\nNOTE: An empty string is NOT equivalent to a JSON NULL value. An empty string means the value is known to be empty. A value of NULL means the value is unknown or undefined."
            },
            "constant": {
              "type": "boolean",
              "description": "Is this variable immutable or mutable? If true, the variable is immutable and MUST NOT be changed. If false, the variable is mutable and can be updated later on in the playbook. The default value is 'false'. If this property is not present then the value is 'false'."
            },
            "external": {
              "type": "boolean",
              "description": "This property only applies to playbook scoped variables. \n\nWhen set to true the variable declaration defines that the variable's initial value is passed into the playbook from a calling context. \n\nWhen set to false or omitted, the variable is defined within the playbook."
            }
          },
          "required": [
            "type"
          ]
        }
      },
      "agent-target": {
        "agent-target": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/agent-target/agent-target.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "agent-target",
          "description": "In a CACAO playbook, agents are the entities that execute commands (see section 5) on or against targets. Agents are stored in a dictionary where the ID is the key and the value is an 'agent-target' object (see section 9.1). Targets are stored in a dictionary where the ID is the key and the value is an 'agent-target' object (see section 9.1). Common properties for agents and targets are defined in section 6.1. \n\nAgents can involve either manual or automated processing. For example, an individual may process a command manually, while a firewall may process a command automatically. An agent type vocabulary is defined in section 6.2, and each agent type is further defined in the rest of the sections. Types include security infrastructure such as firewalls, routers, and threat intelligence platforms, as well as specific network addressable agents like URLs and IPv4/IPv6/MAC addresses. \n\nAgents can use and refer to variables just like other parts of the playbook. For any agent property value, the producer may define a variable substitution such that the actual property value is determined at runtime based on the variable assigned to the agent. In Example 6.1,an agent is referenced within a workflow step, but the agent's actual values are based on variables (e.g., name, email, phone, location) instead of being hard-coded by the agent itself.",
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/$defs/ovs/agent-target-type-ov",
              "description": "The type of object being used. The value of this property SHOULD come from the 'agent-target-type-ov' vocabulary."
            },
            "name": {
              "type": "string",
              "description": "The name that represents this object that is meant to be displayed in a user interface or captured in a log message. This property MUST be populated."
            },
            "description": {
              "type": "string",
              "description": "More details, context, and possibly an explanation about this object. This property SHOULD be populated."
            },
            "location": {
              "$ref": "#/$defs/data-types/civic-location",
              "description": "Physical address information for this object."
            },
            "agent_extensions": {
              "minProperties": 1,
              "type": "object",
              "unevaluatedProperties": false,
              "patternProperties": {
                "^extension-definition--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
                  "type": "object"
                }
              },
              "description": "This property defines the extensions that are in use on this object. \n\nThe key for each entry in the dictionary MUST be an 'identifier' that uniquely identifies the extension (see section 9.10 for more information on identifiers). The value for each key is a JSON object that can contain the structure as defined in the extension definition's schema property."
            }
          },
          "required": [
            "type",
            "name"
          ]
        },
        "group": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/agent-target/group.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "group",
          "description": "This type defines a group object and is used for commands that need to be processed or executed by a group. This object inherits the common agent properties. In addition to the inherited properties, this section defines one additional specific property that is valid for this type.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/agent-target/agent-target"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'group'.",
                  "enum": [
                    "group"
                  ]
                },
                "contact": {
                  "$ref": "#/$defs/data-types/contact",
                  "description": "Contact information for this agent."
                }
              }
            }
          ],
          "unevaluatedProperties": false
        },
        "http-api": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/agent-target/http-api.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "http-api",
          "description": "This type defines an HTTP API object and is used for commands that need to be processed or executed by an HTTP API. In addition to the inherited properties, this section defines six additional specific properties that are valid for this type. In addition to the inherited properties, this section defines seven additional specific properties that are valid for this type.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/agent-target/agent-target"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'http-api'.",
                  "enum": [
                    "http-api"
                  ]
                },
                "http_url": {
                  "type": "string",
                  "description": "A full URL of the HTTP API service that should be called."
                },
                "http_auth_type": {
                  "type": "string",
                  "description": "The authentication type required to access this HTTP API (e.g., 'basic', 'oauth2', etc.)."
                },
                "user_id": {
                  "type": "string",
                  "description": "The user_id property used in HTTP Basic authentication as defined by [RFC7617]."
                },
                "password": {
                  "type": "string",
                  "description": "The password property used in HTTP Basic authentication as defined by [RFC7617]."
                },
                "token": {
                  "type": "string",
                  "description": "The bearer token used in HTTP Bearer Token authentication as defined by [RFC6750]."
                },
                "oauth_header": {
                  "type": "string",
                  "description": "The OAuth header used in OAuth authentication as defined in section 3.5.1 of [RFC5849]."
                },
                "category": {
                  "type": "array",
                  "description": "One or more identified categories of security infrastructure types that this agent represents (see section 6.11.1). \n\nThe value for this property SHOULD come from the 'security-category-type-ov' vocabulary.",
                  "items": {
                    "$ref": "#/$defs/ovs/security-category-type-ov"
                  },
                  "minItems": 1
                }
              }
            }
          ],
          "required": [
            "http_url"
          ],
          "unevaluatedProperties": false
        },
        "individual": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/agent-target/individual.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "individual",
          "description": "This type defines an individual object and is used for commands that need to be processed or executed by an individual. This object inherits the common agent properties. In addition to the inherited properties, this section defines one additional specific property that is valid for this type.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/agent-target/agent-target"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'individual'.",
                  "enum": [
                    "individual"
                  ]
                },
                "contact": {
                  "$ref": "#/$defs/data-types/contact",
                  "description": "Contact information for this agent."
                }
              }
            }
          ],
          "unevaluatedProperties": false
        },
        "linux": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/agent-target/linux.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "linux",
          "description": "This type defines a Linux system object and is used for commands that need to be processed or executed by a Linux system. In addition to the inherited properties, this section defines five additional specific properties that are valid for this type.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/agent-target/agent-target"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'linux'.",
                  "enum": [
                    "linux"
                  ]
                },
                "address": {
                  "type": "object",
                  "unevaluatedProperties": false,
                  "patternProperties": {
                    "^url$": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "[(http(s)?):/(www.)?a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)"
                      }
                    },
                    "^l2mac$": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[a-fA-F0-9]{2}(:[a-fA-F0-9]{2}){5}$"
                      }
                    },
                    "^ipv4$": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "(\\b25[0-5]|\\b2[0-4][0-9]|\\b[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$"
                      }
                    },
                    "^ipv6$": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$"
                      }
                    },
                    "^vlan$": {
                      "type": "array",
                      "items": {
                        "type":"number",
                        "minimum": 0,
                        "maximum": 4095
                      }
                    }
                  },
                  "description": "The key for each entry in the dictionary MUST be a string that uniquely identifies the address type. The key MUST be one of ipv4, ipv6, l2mac, vlan, or url."
                },
                "port": {
                  "type": "string",
                  "description": "The TCP port number for the Linux system. The default value is 22 based on standard port number services [PortNumbers]."
                },
                "username": {
                  "type": "string",
                  "description": "The username to access this system."
                },
                "password": {
                  "type": "string",
                  "description": "The password associated with the username to access this system. This value will most often be passed in via a variable."
                },
                "private_key": {
                  "type": "string",
                  "description": "The private key associated with the username to access this system. This value will most often be passed in via a variable."
                },
                "category": {
                  "type": "array",
                  "description": "One or more identified categories of security infrastructure types that this agent represents (see section 6.11.1). \n\nThe value for this property SHOULD come from the 'security-category-type-ov' vocabulary.",
                  "items": {
                    "$ref": "#/$defs/ovs/security-category-type-ov"
                  },
                  "minItems": 1
                }       
              }
            }
          ],
          "required": [
            "address"
          ],
          "unevaluatedProperties": false
        },
        "location": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/agent-target/location.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "location",
          "description": "This type defines a location object and is used for commands that need to be processed or executed by or at a location. This object inherits the common agent properties. In addition to the inherited properties, this section defines one additional specific property that is valid for this type.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/agent-target/agent-target"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'location'.",
                  "enum": [
                    "location"
                  ]
                },
                "logical": {
                  "type": "array",
                  "description": "An optional list of logical location names as defined by the playbook creator (e.g., wiring closet, network segment, room number, etc).",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              }
            }
          ],
          "unevaluatedProperties": false
        },
        "net-address": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/agent-target/net-address.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "net-address",
          "description": "This type defines a network address object and is used for commands that need to be processed or executed by a device at a network address. In addition to the inherited properties, this section defines five additional specific properties that are valid for this type.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/agent-target/agent-target"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'net-address'.",
                  "enum": [
                    "net-address"
                  ]
                },
                "address": {
                  "type": "object",
                  "unevaluatedProperties": false,
                  "patternProperties": {
                    "^url$": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "[(http(s)?):/(www.)?a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)"
                      }
                    },
                    "^l2mac$": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[a-fA-F0-9]{2}(:[a-fA-F0-9]{2}){5}$"
                      }
                    },
                    "^ipv4$": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "(\\b25[0-5]|\\b2[0-4][0-9]|\\b[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$"
                      }
                    },
                    "^ipv6$": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$"
                      }
                    },
                    "^vlan$": {
                      "type": "array",
                      "items": {
                        "type":"number",
                        "minimum": 0,
                        "maximum": 4095
                      }
                    }
                  },
                  "description": "The key for each entry in the dictionary MUST be a string that uniquely identifies the address type. The key MUST be one of 'ipv4', 'ipv6', 'l2mac', 'vlan', or 'url'."
                },
                "username": {
                  "type": "string",
                  "description": "The username to access this agent."
                },
                "password": {
                  "type": "string",
                  "description": "The password associated with the username to access this agent. This value SHOULD be passed in via a variable."
                },
                "private_key": {
                  "type": "string",
                  "description": "The private key associated with the username to access this agent. This value SHOULD be passed in via a variable."
                },
                "category": {
                  "type": "array",
                  "description": "One or more identified categories of security infrastructure types that this agent represents (see section 6.11.1). \n\nThe value for this property SHOULD come from the 'security-category-type-ov' vocabulary.",
                  "items": {
                    "$ref": "#/$defs/ovs/security-category-type-ov"
                  },
                  "minItems": 1
                }       
              }
            }
          ],
          "required": [
            "address"
          ],
          "unevaluatedProperties": false
        },
        "organization": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/agent-target/organization.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "organization",
          "description": "This type defines an organization object and is used for commands that need to be processed or executed by an organization. This object inherits the common agent properties. In addition to the inherited properties, this section defines one additional specific property that is valid for this type.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/agent-target/agent-target"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'organization'.",
                  "enum": [
                    "organization"
                  ]
                },
                "contact": {
                  "$ref": "#/$defs/data-types/contact",
                  "description": "Contact information for this agent."
                }
              }
            }
          ],
          "unevaluatedProperties": false
        },
        "sector": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/agent-target/sector.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "sector",
          "description": "This type defines a sector object and is used for commands that need to be processed or executed by a sector. This object inherits the common agent properties. In addition to the inherited properties, this section defines one additional specific property that is valid for this type.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/agent-target/agent-target"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'sector'.",
                  "enum": [
                    "sector"
                  ]
                },
                "sector": {
                  "$ref": "#/$defs/ovs/industry-sector-ov",
                  "description": "The values this property SHOULD come from the 'industry-sector-ov' vocabulary, see section 6.7.1."
                }
              }
            }
          ],
          "required": [
            "sector"
          ],
          "unevaluatedProperties": false
        },
        "security-category": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/agent-target/security-category.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "security-category",
          "description": "This type defines a security (infrastructure) category object and is used for commands that need to be processed or executed by a piece of security infrastructure. In addition to the inherited properties, this section defines one additional specific property that is valid for this type.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/agent-target/agent-target"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'security-category'.",
                  "enum": [
                    "security-category"
                  ]
                },
                  "category": {
                    "type": "array",
                    "description": "One or more identified categories of security infrastructure types that this agent represents. A product instantiation may include one or more security infrastructure types as hints to assist in describing the agent features most likely required by a playbook step or playbook. \n\nThe values for this property SHOULD come from the 'security-category-type-ov' vocabulary.",
                    "items": {
                      "$ref": "#/$defs/ovs/security-category-type-ov"
                    },
                    "minItems": 1
                  }
              }
            }
          ],
          "required": [
            "category"
          ],
          "unevaluatedProperties": false
        },
        "ssh": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/agent-target/ssh.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "ssh",
          "description": "This type defines a SSH CLI object and is used for commands that need to be processed or executed by an SSH CLI. In addition to the inherited properties, this section defines six additional specific properties that are valid for this type.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/agent-target/agent-target"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'ssh'.",
                  "enum": [
                    "ssh"
                  ]
                },
                "address": {
                  "type": "object",
                  "unevaluatedProperties": false,
                  "patternProperties": {
                    "^url$": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "[(http(s)?):/(www.)?a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)"
                      }
                    },
                    "^l2mac$": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "^[a-fA-F0-9]{2}(:[a-fA-F0-9]{2}){5}$"
                      }
                    },
                    "^ipv4$": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "(\\b25[0-5]|\\b2[0-4][0-9]|\\b[01]?[0-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$"
                      }
                    },
                    "^ipv6$": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "pattern": "(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$"
                      }
                    },
                    "^vlan$": {
                      "type": "array",
                      "items": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 4095
                      }
                    }
                  },
                  "description": "The key for each entry in the dictionary MUST be a string that uniquely identifies the address type. The key MUST be one of 'ipv4', 'ipv6', 'l2mac', 'vlan', or 'url'."
                },
                "port": {
                  "type": "string",
                  "description": "The TCP port number for the SSH service. The default value is 22 based on standard port number services [PortNumbers]."
                },
                "username": {
                  "type": "string",
                  "description": "The username to access this system."
                },
                "password": {
                  "type": "string",
                  "description": "The password associated with the username to access this system. This value will most often be passed in via a variable."
                },
                "private_key": {
                  "type": "string",
                  "description": "The private key associated with the username to access this system. This value will most often be passed in via a variable."
                },
                "category": {
                  "type": "array",
                  "description": "One or more identified categories of security infrastructure types that this agent represents (see section 6.11.1). \n\nThe value for this property SHOULD come from the security-category-type-ov vocabulary.",
                  "items": {
                    "$ref": "#/$defs/ovs/security-category-type-ov"
                  },
                  "minItems": 1
                }
              }
            }
          ],
          "required": [
            "address"
          ],
          "unevaluatedProperties": false
        }          
      },
      "commands": {
        "command-data": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/commands/command-data.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "command-data",
          "description": "The CACAO command object ('command-data') contains detailed information about the commands that are to be executed or processed automatically or manually as part of an action step (see section 4.5). Each command listed in an action step may be of a different command type, however, all commands listed in a single step MUST be processed or executed by all of the agents defined in that step. \n\nCommands can use and refer to variables just like other parts of the playbook. For each command either the 'command' property or the 'command_b64' property MUST be present. \n\nThe individual commands MAY be defined in other specifications, and when possible will be mapped to the JSON structure of this specification. When that is not possible, they will be base64 encoded.",
          "type": "object",
          "allOf": [
            {
              "properties": {
                "type": {
                  "$ref": "#/$defs/ovs/command-type-ov",
                  "description": "The type of command being used. The value of this property SHOULD come from the 'command-type-ov' vocabulary."
                },
                "description": {
                  "type": "string",
                  "description": "An optional description about this command."
                },
                "command": {
                  "type": "string",
                  "description": "A string-based command as defined by the type. Commands can be simple strings, JSON blobs (normal plain/text JSON data), or type specific command IDs (see example 5.5). \n\nThe command MUST be valid for the defined type and version."
                },
                "command_b64": {
                  "type": "string",
                  "contentEncoding": "base64",
                  "description": "A base64 encoded (see section 4 of [RFC 4648]) command as defined by the type. This property is used for structured commands that are not simple strings or native JSON. \n\nThe command MUST be valid for the defined type and version."
                },
                "version": {
                  "type": "string",
                  "description": "The version of the command language being used. If no version is specified then the most current version of the command language SHOULD be used."
                },
                "playbook_activity": {
                  "$ref": "#/$defs/ovs/playbook-activity-type-ov",
                  "description": "A meta data description of the playbook activity that the command provides that enables summarization at the playbook level of all activities defined within the playbook. This property SHOULD be populated. \n\nThe value for this property SHOULD come from the 'playbook-activity-type-ov' vocabulary."
                },

                "headers" : {
                    "$ref" : "#/$defs/data-types/dictionary"
                },
                "content" : {
                    "type": "sring",
                    "description" : ""
                },
                "content_b64" : {
                    "type": "sring",
                    "description" : ""
                }
              }
            }
          ],
          "required": [
            "type"
          ],
          "unevaluatedProperties": false
        }
      },
      "data-markings": {
        "data-marking": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/data-markings/data-marking.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "data-marking",
          "description": "CACAO data marking definition objects contain detailed information about a specific data marking. Data markings typically represent handling or sharing requirements and are applied via the markings property in a playbook. \n\nData marking objects MUST NOT be versioned because it would allow for indirect changes to the markings on a playbook. For example, if a statement marking definition is changed from 'Reuse Allowed' to 'Reuse Prohibited', all playbooks marked with that statement marking definition would effectively have an updated marking without being updated themselves. Instead, in this example a new statement marking definition with the new text should be created and the marked objects updated to point to the new data marking object. \n\nPlaybooks may be marked with multiple marking statements. In other words, the same playbook can be marked with both a statement saying 'Copyright 2020' and a statement saying, 'Terms of use are ...' and both statements apply. This specification does not define rules for how multiple markings applied to the same object should be interpreted.",
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/$defs/enums/data-marking-type-enum",
              "description": "The type of data marking being used. \n\nThe value for this property MUST come from the 'data-marking-type-enum' enumeration."
            },
            "id": {
              "$ref": "#/$defs/data-types/identifier",
              "description": "A value that uniquely identifies the data marking definition."
            },
            "name": {
              "type": "string",
              "description": "A name used to identify this data marking."
            },
            "description": {
              "type": "string",
              "description": "More details, context, and possibly an explanation about what this data marking does and tries to accomplish."
            },
            "created_by": {
              "$ref": "#/$defs/data-types/identifier",
              "description": "An ID that represents the entity that created this data marking. The ID MUST represent a STIX 2.1+ identity object."
            },
            "created": {
              "$ref": "#/$defs/data-types/timestamp",
              "description": "The time at which this data marking was originally created. The creator can use any time it deems most appropriate as the time the data marking was created, but it MUST be precise to the nearest millisecond (exactly three digits after the decimal place in seconds). The created property MUST NOT be changed."
            },
            "modified": {
              "$ref": "#/$defs/data-types/timestamp",
              "description": "Data markings MUST NOT be versioned. This property MUST always equal the timestamp of the created property."
            },
            "revoked": {
              "type": "boolean",
              "description": "A boolean that identifies if the creator deems that this data marking is no longer valid. The default value is 'false'. Processing of data that has been previously shared with an associated data marking that is subsequently revoked is unspecified and dependent on the implementation of the consuming software."
            },
            "valid_from": {
              "$ref": "#/$defs/data-types/timestamp",
              "description": "The time from which this data marking is considered valid. If omitted, the data marking is valid at all times or until the timestamp defined by valid_until. If the revoked property is 'true' then this property MUST be ignored."
            },
            "valid_until": {
              "$ref": "#/$defs/data-types/timestamp",
              "description": "The time at which this data marking SHOULD no longer be considered a valid marking definition. \n\nIf the valid_until property is omitted, then there is no constraint on the latest time for which the data marking is valid. \n\nThis property MUST be greater than the timestamp in the valid_from property if the valid_from property is defined. \n\nIf the revoked property is true then this property MUST be ignored."
            },
            "labels": {
              "type": "array",
              "description": "An optional set of terms, labels, or tags associated with this data marking. The values may be user, organization, or trust-group defined and their meaning is outside the scope of this specification.",
              "items": {
                "type": "string"
              },
              "minItems": 1
            },
            "external_references": {
              "type": "array",
              "description": "An optional list of external references for this data marking.",
              "items": {
                "$ref": "#/$defs/data-types/external-reference"
              },
              "minItems": 1
            },
            "marking_extensions": {
              "minProperties": 1,
              "type": "object",
              "unevaluatedProperties": false,
              "patternProperties": {
                "^extension-definition--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
                  "type": "object"
                }
              },
              "description": "This property defines the extensions that are in use on this data marking. \n\nThe key for each entry in the dictionary MUST be an 'identifier' that uniquely identifies the extension (see section 9.10 for more information on identifiers). The value for each key is a JSON object that can contain the structure as defined in the extension definition's schema property."
            }
          },
          "required": [
            "type",
            "id",
            "created_by",
            "created",
            "modified"
          ]
        },
        "marking-iep": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/data-markings/marking-iep.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "marking-iep",
          "description": "The IEP marking object defines the representation of a FIRST IEP marking statement. For more information about the properties from the IEP specification, please refer to that document [IEP].",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/data-markings/data-marking"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'marking-iep'.",
                  "enum": [
                    "marking-iep"
                  ]
                },
                "name": {
                  "type": "string",
                  "description": "The name of the IEP policy."
                },
                "tlp_level": {
                  "type": "string",
                  "description": "See IEP Specification [IEP]."
                },
                "description": {
                  "type": "string",
                  "description": "See IEP Specification [IEP]."
                },
                "iep_version": {
                  "type": "string",
                  "description": "See IEP Specification [IEP]."
                },
                "start_date": {
                  "$ref": "#/$defs/data-types/timestamp",
                  "description": "See IEP Specification [IEP]."
                },
                "end_date": {
                  "$ref": "#/$defs/data-types/timestamp",
                  "description": "See IEP Specification [IEP]."
                },
                "encrypt_in_transit": {
                  "type": "string",
                  "description": "See IEP Specification [IEP]."
                },
                "permitted_actions": {
                  "type": "string",
                  "description": "See IEP Specification [IEP]."
                },
                "attribution": {
                  "type": "string",
                  "description": "See IEP Specification [IEP]."
                },
                "unmodified_resale": {
                  "type": "string",
                  "description": "See IEP Specification [IEP]."
                }
              }
            }
          ],
          "required": [
            "name"
          ],
          "unevaluatedProperties": false
        },
        "marking-statement": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/data-markings/marking-statement.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "marking-statement",
          "description": "The statement marking object defines the representation of a textual marking statement (e.g., copyright, terms of use, etc.). Statement markings are generally not machine-readable, and this specification does not define any behavior or actions based on their values.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/data-markings/data-marking"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "marking-statement"
                  ],
                  "description": "The value of this property MUST be 'marking-statement'."
                },
                "statement": {
                  "type": "string",
                  "description": "A statement (e.g., copyright, terms of use) applied to the content marked by this marking definition."
                }
              }
            }
          ],
          "required": [
            "statement"
          ],
          "unevaluatedProperties": false
        },
        "marking-tlp": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/data-markings/marking-tlp.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "marking-tlp",
          "description": "The TLP marking object defines the representation of a FIRST TLP V2 marking statement.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/data-markings/data-marking"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'marking-tlp'.",
                  "enum": [
                    "marking-tlp"
                  ]
                },
                "tlpv2_level": {
                  "type": "string",
                  "enum": [
                    "TLP:RED",
                    "TLP:AMBER",
                    "TLP:AMBER+STRICT",
                    "TLP:GREEN",
                    "TLP:CLEAR"
                  ],
                  "description": "The value of this property is the name of the TLP V2 level as defined by FIRST [TLP]. The value MUST be one of the following: 'TLP:RED', 'TLP:AMBER', 'TLP:AMBER+STRICT', 'TLP:GREEN', 'TLP:CLEAR'"
                }
              }
            }
          ],
          "required": [
            "tlpv2_level"
          ],
          "unevaluatedProperties": false
        }
      },
      "extension-definition": {
        "extension-definition": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/extension-definition/extension-definition.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "extension-definition",
          "description": "The CACAO extension object allows a playbook producer to define detailed information about the extensions that are in use in a playbook that they created. In a playbook, extensions are stored in a dictionary where the ID is the key and the extension definition object is the value. Workflow steps, agents, data markings and playbooks themselves can use extensions by referencing their IDs. \n\nExtensions can use and refer to all objects that may be used in other parts of a playbook including variables and constants just like other parts of the playbook. While the extension's name and description are optional, they are encouraged and producers SHOULD populate them.",
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "extension-definition"
              ],
              "description": "The value of this property MUST be 'extension-definition'."
            },
            "name": {
              "type": "string",
              "description": "A name used to identify this extension for display purposes during execution, development or troubleshooting."
            },
            "description": {
              "type": "string",
              "description": "More details, context, and possibly an explanation about what this extension does and accomplishes. \n\nWhile the extension's description is optional, it is encouraged that producers SHOULD populate the property. \n\nNote that the schema property is the normative definition of the extension, and this property, if present, is for documentation purposes only."
            },
            "created_by": {
              "$ref": "#/$defs/data-types/identifier",
              "description": "An ID that represents the entity that created this extension. The ID MUST represent a STIX 2.1+ identity object."
            },
            "schema": {
              "type": "string",
              "description": "The normative definition of the extension, either as a URL or as text explaining the definition. \n\nA URL SHOULD point to a JSON schema or a location that contains information about the schema."
            },
            "version": {
              "type": "string",
              "description": "The version of this extension. Producers of playbook extensions are encouraged to follow standard semantic versioning procedures where the version number follows the pattern, MAJOR.MINOR.PATCH [SemVer]. This will allow consumers to distinguish between the three different levels of compatibility typically identified by such versioning strings."
            }
          },
          "required": [
            "type",
            "name",
            "created_by",
            "schema",
            "version"
          ],
          "unevaluatedProperties": false
        }
      },
      "workflows": {
        "action": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/workflows/action.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "action",
          "description": "The Action Step workflow step contains the actual commands to be executed on one or more agents. These commands are intended to be processed sequentially. In addition to the inherited properties, this section defines five more specific properties that are valid for this type.",
          "allOf": [
            {
              "$ref": "#/$defs/workflows/workflow-step"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'action'.",
                  "enum": [
                    "action"
                  ]
                },
                "commands": {
                  "type": "array",
                  "description": "A list of commands that are to be executed as part of this step. If more than one command is listed, the commands MUST be processed in the order in which they are listed (see section 5). All commands in a given step MUST be applicable to all the agents and all the targets defined in that step.",
                  "items": {
                    "$ref": "#/$defs/commands/command-data"
                  },
                  "minItems": 1
                },
                "agent": {
                  "$ref": "#/$defs/data-types/identifier",
                  "description": "An agent ID reference that MUST execute the commands defined in this step. \n\nEach ID MUST reference a CACAO 'agent-target' object (see section 6). This list MUST have at least one identifier."
                },
                "targets": {
                  "type": "array",
                  "description": "A list of target ID references that are affected by the commands defined in this step that are executed by the agent. \n\nEach ID MUST reference a CACAO 'agent-target' object (see section 6). This list MUST have at least one identifier.",
                  "items": {
                    "$ref": "#/$defs/data-types/identifier"
                  },
                  "minItems": 1
                },
                "in_args": {
                  "type": "array",
                  "description": "The list of variable names from the local 'step_variables' dictionary (see section 4.1) or passed into this step from the global 'playbook_variables' dictionary (see section 3.1) that are used in either an agent or one of the target(s) associated with this step. See section 9.16 for more information about variables.",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                },
                "out_args": {
                  "type": "array",
                  "description": "The optional list of variable names from the local 'step_variables' dictionary (see section 4.1) or global 'playbook_variables' dictionary (see section 3.1) that are to be returned from this step after execution of the commands by the agent(s) and stored in the same variable dictionary. See section 9.16 for more information about variables.",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              }
            }
          ],
          "required": [
            "commands",
            "agent"
          ],
          "unevaluatedProperties": false
        },
        "end": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/workflows/end.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "end",
          "description": "The End Step workflow step is the ending point of a playbook or branch of step (e.g., a list of steps that are part of a parallel processing branch) and represents an explicit point in the workflow to signify the end of a playbook or branch of steps. While this type inherits all of the common properties of a workflow step it does not define any additional properties. When a playbook or branch of a playbook terminates it MUST call an End Step. This workflow step MUST NOT use the 'on_completion', 'on_success', or 'on_failure' properties.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/workflows/workflow-step"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'end'.",
                  "enum": [
                    "end"
                  ]
                }
              }
            },
            {
              "not" : {
                "anyOf" : [
                  {
                    "required": ["on_completion"]
                  },
                  {
                    "required": ["on_failure"]
                  },
                  {
                    "required": ["on_success"]
                  }
                ]
              }
            }
          ],
          "unevaluatedProperties": false
        },
        "if-condition": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/workflows/if-condition.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "if-condition",
          "description": "The If Condition Step workflow step defines the 'if-then-else' conditional logic that can be used within the workflow of the playbook. In addition to the inherited properties, this section defines three additional specific properties that are valid for this type.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/workflows/workflow-step"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'if-condition'.",
                  "enum": [
                    "if-condition"
                  ]
                },
                "condition": {
                  "type": "string",
                  "description": "A boolean expression as defined in the STIX Patterning Grammar that when it evaluates as true executes the workflow step identified by the 'on_true' property, otherwise it executes the 'on_false' workflow step"
                },
                "on_true": {
                  "type": "string",
                  "description": "The step ID to be processed if the condition evaluates as true. \n\nThe entry in the 'on_true' property forms a branch of steps that are to be executed, even if there is only one workflow step in the branch. Each branch MUST reference a unique End Step when that branch has completed processing. This allows implementations to know when to return to the original If Condition Step that started that branch to look for any 'on_completion', 'on_success', or 'on_failure' actions. \n\nThe ID MUST represent a CACAO workflow step object.",
                  "$ref": "#/$defs/data-types/identifier"
                },
                "on_false": {
                  "type": "string",
                  "description": "The step ID to be processed if the condition evaluates as false. \n\nThe entry in the 'on_false' property forms a branch of steps that are to be executed, even if there is only one workflow step in the branch. Each branch MUST reference a unique End Step when that branch has completed processing. This allows implementations to know when to return to the original If Condition Step that started that branch to look for any 'on_completion', 'on_success', or 'on_failure' actions. \n\nThe ID MUST represent a CACAO workflow Step object.",
                  "$ref": "#/$defs/data-types/identifier"
                }
              }
            }
          ],
          "required": [
            "condition",
            "on_true"
          ],
          "unevaluatedProperties": false
        },
        "parallel": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/workflows/parallel.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "parallel",
          "description": "The Parallel Step workflow step defines how to create steps that are processed in parallel. This workflow step allows playbook authors to define two or more steps that can be executed at the same time. For example, a playbook that responds to an incident may require both the network team and the desktop team to investigate and respond to a threat at the same time. Another example is a response to a cyber attack on an operational technology (OT) environment that requires releasing air / steam / water pressure simultaneously. In addition to the inherited properties, this section defines one additional specific property that is valid for this type. Implementations MUST wait for all steps referenced in the next_steps property to complete before moving on. \n\nThe steps referenced from this object are intended to be processed in parallel, however, if an implementation cannot support executing steps in parallel, then the steps MAY be executed in sequential order if the desired outcome is the same.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/workflows/workflow-step"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'parallel'.",
                  "enum": [
                    "parallel"
                  ]
                },
                "next_steps": {
                  "type": "array",
                  "description": "A list of two or more workflow steps to be processed in parallel. The 'next_steps' MUST contain at least two values. If there is only one value, then the Parallel Step MUST NOT be used. \n\nEach entry in the next_steps property forms a branch of steps that are to be executed, even if there is only one workflow step in the branch. Each branch MUST reference a unique End Step when that branch has completed processing. This allows implementations to know when to return to the original Parallel Step that started that branch to look for any 'on_completion', 'on_success', or 'on_failure' actions. \n\nThe definition of parallel execution and how many parallel steps that are possible to execute is implementation dependent and is not part of this specification. \n\nIf any of the steps referenced in 'next_steps' generate an error of any kind (exception or timeout) then implementers SHOULD consider defining rollback error handling for the playbook and include those steps in the playbook itself. \n\nEach ID MUST represent a CACAO workflow step object.",
                  "items": {
                    "$ref": "#/$defs/data-types/identifier"
                  },
                  "minItems": 1
                }
              }
            }
          ],
          "required": [
            "next_steps"
          ],
          "unevaluatedProperties": false
        },
        "playbook-action": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/workflows/playbook-action.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "playbook-action",
          "description": "The Playbook Action Step workflow step executes a referenced playbook. In addition to the inherited properties, this section defines four more specific properties that are valid for this type.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/workflows/workflow-step"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'playbook-action'.",
                  "enum": [
                    "playbook-action"
                  ]
                },
                "playbook_id": {
                  "$ref": "#/$defs/data-types/identifier",
                  "description": "The referenced playbook to execute at the defined agent(s). \n\nThe playbook ID SHOULD be defined such that it is locally relevant to each agent that will execute the playbook."
                },
                "playbook_version": {
                  "$ref": "#/$defs/data-types/timestamp",
                  "description": "The version of the CACAO playbook that this step references. \n\nThe value of this property MUST be the modified 'timestamp' from the CACAO playbook that this step references. If this property is not defined then the latest version that is known or available is considered valid."
                },
                "in_args": {
                  "type": "array",
                  "description": "The list of variable names from the local step_variables dictionary (see section 4.1) or passed into this step from the global 'playbook_variables' dictionary (see section 3.1) that are used in this playbook. See section 9.16 for more information about variables.",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                },
                "out_args": {
                  "type": "array",
                  "description": "The optional list of variable names from the local 'step_variables' dictionary (see section 4.1) or global 'playbook_variables' dictionary (see section 3.1) that are to be returned from this playbook after execution and stored in the same variable dictionary. See section 9.16 for more information about variables.",
                  "items": {
                    "type": "string"
                  },
                  "minItems": 1
                }
              }
            }
          ],
          "required": [
            "playbook_id"
          ],
          "unevaluatedProperties": false
        },
        "start": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/workflows/start.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "start",
          "description": "The Start Step workflow step is the starting point of a playbook and represents an explicit entry in the workflow to signify the start of a playbook. While this type inherits all of the common properties of a workflow step it does not define any additional properties. This workflow step MUST NOT use the 'on_success' or 'on_failure' properties.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/workflows/workflow-step"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'start'.",
                  "enum": [
                    "start"
                  ]
                }
              }
            },
            {
              "not" : {
                "anyOf" : [
                  {
                    "required": ["on_failure"]
                  },
                  {
                    "required": ["on_success"]
                  }
                ]
              }
            }
          ],
          "unevaluatedProperties": false
        },
        "switch-condition": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/workflows/switch-condition.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "switch-condition",
          "description": "The Switch Condition Step workflow step defines the 'switch' condition logic that can be used within the workflow of the playbook. In addition to the inherited properties, this section defines two additional specific properties that are valid for this type.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/workflows/workflow-step"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'switch-condition'.",
                  "enum": ["switch-condition"]
                },
                "switch": {
                  "type": "string",
                  "description": "A variable that is evaluated to determine which key in the cases dictionary is matched against to execute the associated step."
                },
                "cases": {
                  "description": "This property is a dictionary that defines one or more case values (as dictionary keys) and a step ID (as a key value) to be processed when the case value is matched against the switch value. \n\nThe value for each entry in the dictionary MUST be an 'identifier' and it MUST represent a CACAO workflow step object. This value uniquely identifies the steps to be processed when that key/value is chosen (see section 9.10 for more information on identifiers). \n\nEach entry in the cases property forms a branch of steps that are to be executed, even if there is only one workflow step in the branch. Each branch MUST reference a unique End Step when that branch has completed processing. This allows implementations to know when to return to the original Switch Condition Step that started that branch to look for any 'on_completion', 'on_success', or 'on_failure' actions. \n\nThis dictionary MAY have a 'default' case value.",
                  "type": "object",
                  "unevaluatedProperties": false,
                  "patternProperties": {
                    "^[a-zA-Z0-9_-]{0,250}": {
                      "oneOf": [
                        {
                          "type": "string",
                          "pattern": "action--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
                        },
                        {
                          "type": "string",
                          "pattern": "end--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
                        },
                        {
                          "type": "string",
                          "pattern": "if-condition--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
                        },
                        {
                          "type": "string",
                          "pattern": "parallel--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
                        },
                        {
                          "type": "string",
                          "pattern": "playbook--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
                        },
                        {
                          "type": "string",
                          "pattern": "start--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
                        },
                        {
                          "type": "string",
                          "pattern": "switch-condition--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
                        },
                        {
                          "type": "string",
                          "pattern": "while-condition--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
                        }
                      ]
                    }
                  }
                }
              }
            }
          ],
          "required": ["switch", "cases"],
          "unevaluatedProperties": false
        },
        "while-condition": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/workflows/while-condition.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "while-condition",
          "description": "The While Condition Step workflow step defines the 'while' conditional logic that can be used within the workflow of the playbook. In addition to the inherited properties, this section defines three additional specific properties that are valid for this type.",
          "type": "object",
          "allOf": [
            {
              "$ref": "#/$defs/workflows/workflow-step"
            },
            {
              "properties": {
                "type": {
                  "type": "string",
                  "description": "The value of this property MUST be 'while-condition'.",
                  "enum": [
                    "while-condition"
                  ]
                },
                "condition": {
                  "type": "string",
                  "description": "A boolean expression as defined in the STIX Patterning Grammar that while it is true executes the workflow step identified by 'on_true' otherwise it exits the while conditional workflow step and executes the 'on_false' workflow step"
                },
                "on_true": {
                  "type": "string",
                  "description": "The step ID to be processed every time the loop condition evaluates as true. \n\nThe entry in the on_true property forms a branch of steps that are to be executed, even if there is only one workflow step in the branch. Each branch MUST reference a unique End Step when that branch has completed processing. This allows implementations to know when to return to the original While Step that started that branch to look for any 'on_completion', 'on_success', or 'on_failure' actions. \n\nThe ID MUST represent a CACAO workflow step object.",
                  "$ref": "#/$defs/data-types/identifier"
                }
              }
            }
          ],
          "required": [
            "condition",
            "on_true"
          ],
          "unevaluatedProperties": false
        },
        "workflow-step": {
          "$id": "https://raw.githubusercontent.com/cyentific-rni/cacao-json-schemas/cacao-v2.0-csd01/schemas/workflows/workflow-step.json",
          "$schema": "http://json-schema.org/draft-07/schema#",
          "title": "workflow-step",
          "description": "Workflows contain a series of steps that are stored in a dictionary (see the workflow property in section 3.1), where the key is the step ID and the value is a workflow step. These workflow steps along with the associated commands form the building blocks for playbooks and are used to control the commands that need to be executed. Workflows steps are processed either sequentially, in parallel, or both depending on the type of steps required by the playbook. In addition to simple processing, workflow steps MAY also contain conditional and/or temporal operations to control the execution of the playbook. \n\nConditional processing means executing steps or commands after some sort of condition is met. Temporal processing means executing steps or commands either during a certain time window or after some period of time has passed. \n\nThis section defines the various workflow steps and how they may be used to define a playbook.",
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/$defs/enums/workflow-step-type-enum",
              "description": "The type of workflow step being used. \n\nThe value for this property MUST come from the 'workflow-step-type-enum' enumeration."
            },
            "name": {
              "type": "string",
              "description": "A name for this step that is meant to be displayed in a user interface or captured in a log message."
            },
            "description": {
              "type": "string",
              "description": "More details, context, and possibly an explanation about what this step does and tries to accomplish."
            },
            "external_references": {
              "type": "array",
              "description": "An optional list of external references for this step.",
              "items": {
                "$ref": "#/$defs/data-types/external-reference"
              },
              "minItems": 1
            },
            "delay": {
              "type": "integer",
              "minimum": 1,
              "description": "A number (ùïé - whole number) that represents the amount of time in milliseconds that this step SHOULD wait before it starts processing. \n\nIf specified, the value for this property MUST be greater than or equal to 0. \n\nIf this property is omitted, then the workflow step executes immediately without delay."
            },
            "timeout": {
              "type": "integer",
              "description": "A number (ùïé - whole number) that represents the amount of time in milliseconds that this step MUST wait before considering the step has failed. \n\nWhen a timeout has occurred for a step, the on_failure step pointer is invoked (if defined) and the information included in that call states that an ACTION_TIMEOUT occurred including the id of the step that timed out. \n\nIf specified, the value of this property MUST be greater than or equal to 0. \n\nIf this property is omitted, the system executing this workflow step SHOULD consider implementing a maximum allowed timeout to ensure that no individual workflow step can block a playbook execution indefinitely."
            },
            "step_variables": {
              "type": "object",
              "unevaluatedProperties": false,
              "description": "This property contains the variables that can be used within this workflow step or within commands and agents referenced by this workflow step. See section 9.16.2 for information about referencing variables. \n\nThe key for each entry in the dictionary MUST be a string that uniquely identifies the 'variable'. The value for each key MUST be a CACAO variable data type (see section 9.16.3).",
              "patternProperties": {
                "^__[a-zA-Z_][a-zA-Z0-9_-]{0,199}__$": {
                  "$ref": "#/$defs/data-types/variable"
                }
              }
            },
            "owner": {
              "$ref": "#/$defs/data-types/identifier",
              "description": "An ID that represents the entity that is assigned as the owner or responsible party for this step. \n\nThe value of this property MUST represent a STIX 2.1+ Identity object."
            },
            "on_completion": {
              "$ref": "#/$defs/data-types/identifier",
              "description": "The ID of the next step to be processed upon completion of the defined commands. \n\nThe value of this property MUST represent a CACAO workflow step object. \n\nIf this property is defined, then on_success and 'on_failure' MUST NOT be defined."
            },
            "on_success": {
              "$ref": "#/$defs/data-types/identifier",
              "description": "The ID of the next step to be processed if this step completes successfully. \n\nThe value of this property MUST represent a CACAO workflow step object. \n\nIf this property is defined, then on_completion MUST NOT be defined. This property MUST NOT be used on an end step."
            },
            "on_failure": {
              "$ref": "#/$defs/data-types/identifier",
              "description": "The ID of the next step to be processed if this step fails to complete successfully. \n\nThe value of this property MUST represent a CACAO workflow step object. \n\nIf omitted and a failure occurs, then the playbook's exception handler found in the workflow_exception property at the Playbook level will be invoked. \n\nIf this property is defined, then on_completion MUST NOT be defined. This property MUST NOT be used on an end step."
            },
            "step_extensions": {
              "minProperties": 1,
              "type": "object",
              "unevaluatedProperties": false,
              "patternProperties": {
                "^extension-definition--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$": {
                  "type": "object"
                }
              },
              "description": "This property defines the extensions that are in use on this step. \n\nThe key for each entry in the dictionary MUST be an 'identifier' that uniquely identifies the extension (see section 9.10 for more information on identifiers). The value for each key is a JSON object that can contain the structure as defined in the extension definition's schema property. Step extensions SHOULD be located in the extension_definitions property found at the Playbook level."
            }
          },
          "anyOf": [
            {
              "anyOf" :[
                {
                  "required": ["on_failure"]
                },
                {
                  "required": ["on_success"]
                }
              ]
            },
            {
              "required": ["on_completion"]
            },
            {
              "properties": {
                "type" : {
                  "type" : "string",
                  "enum": [
                    "end"
                  ]
                }
              }
            }
          ],
          "required": [
            "type"
          ]
        }
      }
    }
  }
    