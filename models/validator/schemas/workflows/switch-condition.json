{
    "$id": "workflows",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "switch-condition",
    "description": "The switch condition step workflow step defines the 'switch' condition logic that can be used within the workflow of the playbook. In addition to the inherited properties, this section defines the following additional properties that are valid for this type.",
    "type": "object",
    "allOf": [
        {
            "$ref": "workflow-step.json"
        },
        {
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The value of this property MUST be 'switch-condition'.",
                    "enum": [
                        "switch-condition"
                    ]
                },
                "switch": {
                    "type": "string",
                    "description": "A variable that is evaluated to determine which key in the cases dictionary is matched against to execute the associated step."
                },
                "cases": {
                    "description": "This property is a dictionary that defines one or more case values (as dictionary keys) and a step ID (as a key value) to be processed when the case value is matched against the switch value. \n\nThe value for each entry in the dictionary MUST be an identifier and it MUST represent a CACAO workflow step object. This value uniquely identifies the steps to be processed when that key/value is chosen (see section 10.10 for more information on identifiers). \n\nEach entry in the cases property forms a branch of steps that are to be executed, even if there is only one workflow step in the branch. Each branch MUST reference a unique end step when that branch has completed processing. This allows implementations to know when to return to the original switch condition step that started that branch to look for any on_completion, on_success, or on_failure actions. \n\nThis dictionary MAY have a 'default' case value.",
                    "type": "object",
                    "patternProperties": {
                        "^[a-zA-Z0-9_-]{0,250}": {
                            "oneOf": [
                                {
                                    "type": "string",
                                    "pattern": "action--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
                                },
                                {
                                    "type": "string",
                                    "pattern": "end--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
                                },
                                {
                                    "type": "string",
                                    "pattern": "if-condition--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
                                },
                                {
                                    "type": "string",
                                    "pattern": "parallel--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
                                },
                                {
                                    "type": "string",
                                    "pattern": "playbook--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
                                },
                                {
                                    "type": "string",
                                    "pattern": "start--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
                                },
                                {
                                    "type": "string",
                                    "pattern": "switch-condition--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
                                },
                                {
                                    "type": "string",
                                    "pattern": "while-condition--[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$"
                                }
                            ]
                        }
                    }
                }
            }
        }
    ],
    "required": [
        "switch",
        "cases"
    ]
}