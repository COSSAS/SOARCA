{
    "$id": "data-types",
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "civic-location",
    "description": "The 'civic-location' data type captures civic location information and uses the JSON object type [RFC8259] for serialization. Implementations need to be mindful when including physical address information and GPS information into the same civic location to ensure that they reference the same actual physical location. However, in the event that the physical address information and the GPS information do not match, then the physical address information SHOULD be considered correct.",
    "type": "object",
    "properties": {
        "name": {
            "type": "string",
            "description": "A name for this location."
        },
        "description": {
            "type": "string",
            "description": "A detailed description about this location."
        },
        "building_details": {
            "type": "string",
            "description": "Additional details about the location within a building including things like floor, room, etc."
        },
        "network_details": {
            "type": "string",
            "description": "Additional details about this network location including things like wiring closet, rack number, rack location, and VLANs."
        },
        "region": {
            "$ref": "#/$defs/region-enum",
            "description": "The geographical region for this location. \n\nThe value for this property MUST come from the region-enum enumeration (see section 10.4.1)."
        },
        "country": {
            "type": "string",
            "description": "The country for this location. This property MUST contain a valid ISO 3166-1 ALPHA-2 Code [ISO3166-1]."
        },
        "administrative_area": {
            "type": "string",
            "description": "The state, province, or other sub-national administrative area for this location. \n\nThis property SHOULD contain a valid ISO 3166-2 Code [ISO3166-2]."
        },
        "city": {
            "type": "string",
            "description": "The city for this location."
        },
        "street_address": {
            "type": "string",
            "description": "The street address for this location. This property includes all aspects or parts of the street address. For example, some addresses may have multiple lines including a mailstop or apartment number."
        },
        "postal_code": {
            "type": "string",
            "description": "The postal code for this location."
        },
        "latitude": {
            "type": "string",
            "description": "The GPS latitude of the location in decimal degrees. Positive numbers describe latitudes north of the equator, and negative numbers describe latitudes south of the equator. The value of this property MUST be less than or equal to 90.0 and greater than -90.0 (i.e., 90.0 >= x > -90.0). \n\nIf the longitude property is present, this property MUST be present. \n\nNOTE: Some systems like Google Maps have the following rules. 'Latitude ranges between -90 and 90 degrees, inclusive. Values above or below this range will be clamped to the range [-90, 90]. This means that if the value specified is less than -90, it will be set to -90. And if the value is greater than 90, it will be set to 90.' [Google Maps]"
        },
        "longitude": {
            "type": "string",
            "description": "The GPS longitude of the location in decimal degrees. Positive numbers describe longitudes east of the prime meridian and negative numbers describe longitudes west of the prime meridian. The value of this property MUST be less than or equal to 180.0 and a value that is greater than -180.0 (i.e., 180.0 >= x > -180.0). \n\nIf the latitude property is present, this property MUST be present. \n\nNOTE: Some systems like Google Maps have the following rules. 'Longitude ranges between -180 and 180 degrees, inclusive. Values above or below this range will be wrapped so that they fall within the range. For example, a value of -190 will be converted to 170. A value of 190 will be converted to -170. This reflects the fact that longitudes wrap around the globe.' [Google Maps]"
        },
        "precision": {
            "type": "string",
            "description": "Defines the precision of the coordinates specified by the 'latitude' and 'longitude' properties. This is measured in meters. The actual agent may be anywhere up to precision meters from the defined point. \n\nIf this property is not present, then the precision is unspecified. \n\nIf this property is present, the 'latitude' and 'longitude' properties MUST be present."
        }
    },
    "$defs": {
        "region-enum": {
            "type": "string",
            "enum": [
                "africa",
                "eastern-africa",
                "middle-africa",
                "northern-africa",
                "southern-africa",
                "western-africa",
                "americas",
                "caribbean",
                "central-america",
                "latin-america-caribbean",
                "northern-america",
                "south-america",
                "asia",
                "central-asia",
                "eastern-asia",
                "southern-asia",
                "south-eastern-asia",
                "western-asia",
                "europe",
                "eastern-europe",
                "northern-europe",
                "southern-europe",
                "western-europe",
                "oceania",
                "antarctica",
                "australia-new-zealand",
                "melanesia",
                "micronesia",
                "polynesia"
            ]
        }
    }
}