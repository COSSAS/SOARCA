// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PartialAbility partial ability
//
// swagger:model Partial-Ability
type PartialAbility struct {

	// ability id
	AbilityID string `json:"ability_id,omitempty"`

	// access
	Access struct {
		Access
	} `json:"access,omitempty"`

	// additional info
	AdditionalInfo map[string]string `json:"additional_info,omitempty"`

	// buckets
	Buckets []string `json:"buckets"`

	// delete payload
	DeletePayload *bool `json:"delete_payload,omitempty"`

	// description
	Description *string `json:"description,omitempty"`

	// executors
	Executors []*Executor `json:"executors"`

	// name
	Name *string `json:"name,omitempty"`

	// plugin
	Plugin *string `json:"plugin,omitempty"`

	// privilege
	Privilege *string `json:"privilege,omitempty"`

	// repeatable
	Repeatable *bool `json:"repeatable,omitempty"`

	// requirements
	Requirements []*Requirement `json:"requirements"`

	// singleton
	Singleton *bool `json:"singleton,omitempty"`

	// tactic
	Tactic *string `json:"tactic,omitempty"`

	// technique id
	TechniqueID *string `json:"technique_id,omitempty"`

	// technique name
	TechniqueName *string `json:"technique_name,omitempty"`
}

// Validate validates this partial ability
func (m *PartialAbility) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequirements(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartialAbility) validateAccess(formats strfmt.Registry) error {
	if swag.IsZero(m.Access) { // not required
		return nil
	}

	return nil
}

func (m *PartialAbility) validateExecutors(formats strfmt.Registry) error {
	if swag.IsZero(m.Executors) { // not required
		return nil
	}

	for i := 0; i < len(m.Executors); i++ {
		if swag.IsZero(m.Executors[i]) { // not required
			continue
		}

		if m.Executors[i] != nil {
			if err := m.Executors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("executors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("executors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PartialAbility) validateRequirements(formats strfmt.Registry) error {
	if swag.IsZero(m.Requirements) { // not required
		return nil
	}

	for i := 0; i < len(m.Requirements); i++ {
		if swag.IsZero(m.Requirements[i]) { // not required
			continue
		}

		if m.Requirements[i] != nil {
			if err := m.Requirements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requirements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("requirements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this partial ability based on the context it is used
func (m *PartialAbility) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccess(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecutors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequirements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartialAbility) contextValidateAccess(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *PartialAbility) contextValidateExecutors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Executors); i++ {

		if m.Executors[i] != nil {

			if swag.IsZero(m.Executors[i]) { // not required
				return nil
			}

			if err := m.Executors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("executors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("executors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PartialAbility) contextValidateRequirements(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Requirements); i++ {

		if m.Requirements[i] != nil {

			if swag.IsZero(m.Requirements[i]) { // not required
				return nil
			}

			if err := m.Requirements[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requirements" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("requirements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartialAbility) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartialAbility) UnmarshalBinary(b []byte) error {
	var res PartialAbility
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
