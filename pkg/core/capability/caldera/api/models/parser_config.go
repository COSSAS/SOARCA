// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ParserConfig parser config
//
// swagger:model ParserConfig
type ParserConfig struct {

	// custom parser vals
	CustomParserVals map[string]string `json:"custom_parser_vals,omitempty"`

	// edge
	Edge *string `json:"edge,omitempty"`

	// source
	Source string `json:"source,omitempty"`

	// target
	Target *string `json:"target,omitempty"`

	// parser config additional properties
	ParserConfigAdditionalProperties map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *ParserConfig) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// custom parser vals
		CustomParserVals map[string]string `json:"custom_parser_vals,omitempty"`

		// edge
		Edge *string `json:"edge,omitempty"`

		// source
		Source string `json:"source,omitempty"`

		// target
		Target *string `json:"target,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv ParserConfig

	rcv.CustomParserVals = stage1.CustomParserVals
	rcv.Edge = stage1.Edge
	rcv.Source = stage1.Source
	rcv.Target = stage1.Target
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "custom_parser_vals")
	delete(stage2, "edge")
	delete(stage2, "source")
	delete(stage2, "target")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.ParserConfigAdditionalProperties = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m ParserConfig) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// custom parser vals
		CustomParserVals map[string]string `json:"custom_parser_vals,omitempty"`

		// edge
		Edge *string `json:"edge,omitempty"`

		// source
		Source string `json:"source,omitempty"`

		// target
		Target *string `json:"target,omitempty"`
	}

	stage1.CustomParserVals = m.CustomParserVals
	stage1.Edge = m.Edge
	stage1.Source = m.Source
	stage1.Target = m.Target

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.ParserConfigAdditionalProperties) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.ParserConfigAdditionalProperties)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this parser config
func (m *ParserConfig) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this parser config based on context it is used
func (m *ParserConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ParserConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParserConfig) UnmarshalBinary(b []byte) error {
	var res ParserConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
