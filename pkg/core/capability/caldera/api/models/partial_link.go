// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PartialLink partial link
//
// swagger:model Partial-Link
type PartialLink struct {

	// ability
	Ability *Ability `json:"ability,omitempty"`

	// agent reported time
	AgentReportedTime *string `json:"agent_reported_time,omitempty"`

	// cleanup
	Cleanup int64 `json:"cleanup,omitempty"`

	// collect
	Collect string `json:"collect,omitempty"`

	// command
	Command string `json:"command,omitempty"`

	// deadman
	Deadman bool `json:"deadman,omitempty"`

	// decide
	Decide string `json:"decide,omitempty"`

	// executor
	Executor *Executor `json:"executor,omitempty"`

	// facts
	Facts []*Fact `json:"facts"`

	// finish
	Finish string `json:"finish,omitempty"`

	// host
	Host *string `json:"host,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// jitter
	Jitter int64 `json:"jitter,omitempty"`

	// output
	Output string `json:"output,omitempty"`

	// paw
	Paw string `json:"paw,omitempty"`

	// pid
	Pid string `json:"pid,omitempty"`

	// pin
	Pin int64 `json:"pin,omitempty"`

	// plaintext command
	PlaintextCommand string `json:"plaintext_command,omitempty"`

	// relationships
	Relationships []*Relationship `json:"relationships"`

	// score
	Score int64 `json:"score,omitempty"`

	// status
	Status *int64 `json:"status,omitempty"`

	// unique
	Unique string `json:"unique,omitempty"`

	// used
	Used []*Fact `json:"used"`

	// visibility
	Visibility *Visibility `json:"visibility,omitempty"`
}

// Validate validates this partial link
func (m *PartialLink) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationships(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartialLink) validateAbility(formats strfmt.Registry) error {
	if swag.IsZero(m.Ability) { // not required
		return nil
	}

	if m.Ability != nil {
		if err := m.Ability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ability")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ability")
			}
			return err
		}
	}

	return nil
}

func (m *PartialLink) validateExecutor(formats strfmt.Registry) error {
	if swag.IsZero(m.Executor) { // not required
		return nil
	}

	if m.Executor != nil {
		if err := m.Executor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("executor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("executor")
			}
			return err
		}
	}

	return nil
}

func (m *PartialLink) validateFacts(formats strfmt.Registry) error {
	if swag.IsZero(m.Facts) { // not required
		return nil
	}

	for i := 0; i < len(m.Facts); i++ {
		if swag.IsZero(m.Facts[i]) { // not required
			continue
		}

		if m.Facts[i] != nil {
			if err := m.Facts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("facts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("facts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PartialLink) validateRelationships(formats strfmt.Registry) error {
	if swag.IsZero(m.Relationships) { // not required
		return nil
	}

	for i := 0; i < len(m.Relationships); i++ {
		if swag.IsZero(m.Relationships[i]) { // not required
			continue
		}

		if m.Relationships[i] != nil {
			if err := m.Relationships[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationships" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relationships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PartialLink) validateUsed(formats strfmt.Registry) error {
	if swag.IsZero(m.Used) { // not required
		return nil
	}

	for i := 0; i < len(m.Used); i++ {
		if swag.IsZero(m.Used[i]) { // not required
			continue
		}

		if m.Used[i] != nil {
			if err := m.Used[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("used" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("used" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PartialLink) validateVisibility(formats strfmt.Registry) error {
	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	if m.Visibility != nil {
		if err := m.Visibility.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("visibility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("visibility")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this partial link based on the context it is used
func (m *PartialLink) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAbility(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecutor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelationships(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVisibility(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartialLink) contextValidateAbility(ctx context.Context, formats strfmt.Registry) error {

	if m.Ability != nil {

		if swag.IsZero(m.Ability) { // not required
			return nil
		}

		if err := m.Ability.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ability")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ability")
			}
			return err
		}
	}

	return nil
}

func (m *PartialLink) contextValidateExecutor(ctx context.Context, formats strfmt.Registry) error {

	if m.Executor != nil {

		if swag.IsZero(m.Executor) { // not required
			return nil
		}

		if err := m.Executor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("executor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("executor")
			}
			return err
		}
	}

	return nil
}

func (m *PartialLink) contextValidateFacts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Facts); i++ {

		if m.Facts[i] != nil {

			if swag.IsZero(m.Facts[i]) { // not required
				return nil
			}

			if err := m.Facts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("facts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("facts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PartialLink) contextValidateRelationships(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Relationships); i++ {

		if m.Relationships[i] != nil {

			if swag.IsZero(m.Relationships[i]) { // not required
				return nil
			}

			if err := m.Relationships[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relationships" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relationships" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PartialLink) contextValidateUsed(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Used); i++ {

		if m.Used[i] != nil {

			if swag.IsZero(m.Used[i]) { // not required
				return nil
			}

			if err := m.Used[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("used" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("used" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PartialLink) contextValidateVisibility(ctx context.Context, formats strfmt.Registry) error {

	if m.Visibility != nil {

		if swag.IsZero(m.Visibility) { // not required
			return nil
		}

		if err := m.Visibility.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("visibility")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("visibility")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartialLink) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartialLink) UnmarshalBinary(b []byte) error {
	var res PartialLink
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
