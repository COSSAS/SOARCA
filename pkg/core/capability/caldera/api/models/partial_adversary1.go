// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PartialAdversary1 partial adversary1
//
// swagger:model Partial-Adversary1
type PartialAdversary1 struct {

	// atomic ordering
	AtomicOrdering []string `json:"atomic_ordering"`

	// description
	Description string `json:"description,omitempty"`

	// has repeatable abilities
	// Read Only: true
	HasRepeatableAbilities *bool `json:"has_repeatable_abilities,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// objective
	Objective string `json:"objective,omitempty"`

	// plugin
	Plugin *string `json:"plugin,omitempty"`

	// tags
	Tags []string `json:"tags"`
}

// Validate validates this partial adversary1
func (m *PartialAdversary1) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this partial adversary1 based on the context it is used
func (m *PartialAdversary1) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHasRepeatableAbilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartialAdversary1) contextValidateHasRepeatableAbilities(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "has_repeatable_abilities", "body", m.HasRepeatableAbilities); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartialAdversary1) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartialAdversary1) UnmarshalBinary(b []byte) error {
	var res PartialAdversary1
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
