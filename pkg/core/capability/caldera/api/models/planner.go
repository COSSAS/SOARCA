// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Planner planner
//
// swagger:model Planner
type Planner struct {

	// allow repeatable abilities
	AllowRepeatableAbilities bool `json:"allow_repeatable_abilities,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// ignore enforcement modules
	IgnoreEnforcementModules []string `json:"ignore_enforcement_modules"`

	// module
	Module string `json:"module,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// params
	Params map[string]interface{} `json:"params,omitempty"`

	// plugin
	Plugin *string `json:"plugin,omitempty"`

	// stopping conditions
	StoppingConditions []*Fact `json:"stopping_conditions"`
}

// Validate validates this planner
func (m *Planner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStoppingConditions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Planner) validateStoppingConditions(formats strfmt.Registry) error {
	if swag.IsZero(m.StoppingConditions) { // not required
		return nil
	}

	for i := 0; i < len(m.StoppingConditions); i++ {
		if swag.IsZero(m.StoppingConditions[i]) { // not required
			continue
		}

		if m.StoppingConditions[i] != nil {
			if err := m.StoppingConditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stopping_conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stopping_conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this planner based on the context it is used
func (m *Planner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStoppingConditions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Planner) contextValidateStoppingConditions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StoppingConditions); i++ {

		if m.StoppingConditions[i] != nil {

			if swag.IsZero(m.StoppingConditions[i]) { // not required
				return nil
			}

			if err := m.StoppingConditions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stopping_conditions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stopping_conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Planner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Planner) UnmarshalBinary(b []byte) error {
	var res Planner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
