// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AgentConfigUpdate agent config update
//
// swagger:model AgentConfigUpdate
type AgentConfigUpdate struct {

	// bootstrap abilities
	BootstrapAbilities []string `json:"bootstrap_abilities"`

	// deadman abilities
	DeadmanAbilities []string `json:"deadman_abilities"`

	// deployments
	// Read Only: true
	Deployments []string `json:"deployments"`

	// implant name
	ImplantName string `json:"implant_name,omitempty"`

	// sleep max
	SleepMax int64 `json:"sleep_max,omitempty"`

	// sleep min
	SleepMin int64 `json:"sleep_min,omitempty"`

	// untrusted timer
	UntrustedTimer int64 `json:"untrusted_timer,omitempty"`

	// watchdog
	Watchdog int64 `json:"watchdog,omitempty"`
}

// Validate validates this agent config update
func (m *AgentConfigUpdate) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validate this agent config update based on the context it is used
func (m *AgentConfigUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeployments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgentConfigUpdate) contextValidateDeployments(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deployments", "body", []string(m.Deployments)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgentConfigUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgentConfigUpdate) UnmarshalBinary(b []byte) error {
	var res AgentConfigUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
