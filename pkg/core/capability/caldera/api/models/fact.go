// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Fact fact
//
// swagger:model Fact
type Fact struct {

	// collected by
	CollectedBy []string `json:"collected_by"`

	// created
	// Read Only: true
	Created string `json:"created,omitempty"`

	// limit count
	LimitCount int64 `json:"limit_count,omitempty"`

	// links
	Links []string `json:"links"`

	// name
	// Read Only: true
	Name string `json:"name,omitempty"`

	// origin type
	OriginType interface{} `json:"origin_type,omitempty"`

	// relationships
	Relationships []string `json:"relationships"`

	// score
	Score int64 `json:"score,omitempty"`

	// source
	Source *string `json:"source,omitempty"`

	// technique id
	TechniqueID *string `json:"technique_id,omitempty"`

	// trait
	// Required: true
	Trait *string `json:"trait"`

	// unique
	// Read Only: true
	Unique string `json:"unique,omitempty"`

	// value
	Value interface{} `json:"value,omitempty"`
}

// Validate validates this fact
func (m *Fact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTrait(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Fact) validateTrait(formats strfmt.Registry) error {

	if err := validate.Required("trait", "body", m.Trait); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this fact based on the context it is used
func (m *Fact) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreated(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnique(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Fact) contextValidateCreated(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "created", "body", string(m.Created)); err != nil {
		return err
	}

	return nil
}

func (m *Fact) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *Fact) contextValidateUnique(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "unique", "body", string(m.Unique)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Fact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Fact) UnmarshalBinary(b []byte) error {
	var res Fact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
