// Code generated by go-swagger; DO NOT EDIT.

package payloads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewHeadAPIV2PayloadsParams creates a new HeadAPIV2PayloadsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewHeadAPIV2PayloadsParams() *HeadAPIV2PayloadsParams {
	return &HeadAPIV2PayloadsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewHeadAPIV2PayloadsParamsWithTimeout creates a new HeadAPIV2PayloadsParams object
// with the ability to set a timeout on a request.
func NewHeadAPIV2PayloadsParamsWithTimeout(timeout time.Duration) *HeadAPIV2PayloadsParams {
	return &HeadAPIV2PayloadsParams{
		timeout: timeout,
	}
}

// NewHeadAPIV2PayloadsParamsWithContext creates a new HeadAPIV2PayloadsParams object
// with the ability to set a context for a request.
func NewHeadAPIV2PayloadsParamsWithContext(ctx context.Context) *HeadAPIV2PayloadsParams {
	return &HeadAPIV2PayloadsParams{
		Context: ctx,
	}
}

// NewHeadAPIV2PayloadsParamsWithHTTPClient creates a new HeadAPIV2PayloadsParams object
// with the ability to set a custom HTTPClient for a request.
func NewHeadAPIV2PayloadsParamsWithHTTPClient(client *http.Client) *HeadAPIV2PayloadsParams {
	return &HeadAPIV2PayloadsParams{
		HTTPClient: client,
	}
}

/*
HeadAPIV2PayloadsParams contains all the parameters to send to the API endpoint

	for the head API v2 payloads operation.

	Typically these are written to a http.Request.
*/
type HeadAPIV2PayloadsParams struct {

	// AddPath.
	AddPath *bool

	// ExcludePlugins.
	ExcludePlugins *bool

	// Sort.
	Sort *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the head API v2 payloads params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HeadAPIV2PayloadsParams) WithDefaults() *HeadAPIV2PayloadsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the head API v2 payloads params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *HeadAPIV2PayloadsParams) SetDefaults() {
	var (
		addPathDefault = bool(false)

		excludePluginsDefault = bool(false)

		sortDefault = bool(false)
	)

	val := HeadAPIV2PayloadsParams{
		AddPath:        &addPathDefault,
		ExcludePlugins: &excludePluginsDefault,
		Sort:           &sortDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the head API v2 payloads params
func (o *HeadAPIV2PayloadsParams) WithTimeout(timeout time.Duration) *HeadAPIV2PayloadsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the head API v2 payloads params
func (o *HeadAPIV2PayloadsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the head API v2 payloads params
func (o *HeadAPIV2PayloadsParams) WithContext(ctx context.Context) *HeadAPIV2PayloadsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the head API v2 payloads params
func (o *HeadAPIV2PayloadsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the head API v2 payloads params
func (o *HeadAPIV2PayloadsParams) WithHTTPClient(client *http.Client) *HeadAPIV2PayloadsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the head API v2 payloads params
func (o *HeadAPIV2PayloadsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddPath adds the addPath to the head API v2 payloads params
func (o *HeadAPIV2PayloadsParams) WithAddPath(addPath *bool) *HeadAPIV2PayloadsParams {
	o.SetAddPath(addPath)
	return o
}

// SetAddPath adds the addPath to the head API v2 payloads params
func (o *HeadAPIV2PayloadsParams) SetAddPath(addPath *bool) {
	o.AddPath = addPath
}

// WithExcludePlugins adds the excludePlugins to the head API v2 payloads params
func (o *HeadAPIV2PayloadsParams) WithExcludePlugins(excludePlugins *bool) *HeadAPIV2PayloadsParams {
	o.SetExcludePlugins(excludePlugins)
	return o
}

// SetExcludePlugins adds the excludePlugins to the head API v2 payloads params
func (o *HeadAPIV2PayloadsParams) SetExcludePlugins(excludePlugins *bool) {
	o.ExcludePlugins = excludePlugins
}

// WithSort adds the sort to the head API v2 payloads params
func (o *HeadAPIV2PayloadsParams) WithSort(sort *bool) *HeadAPIV2PayloadsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the head API v2 payloads params
func (o *HeadAPIV2PayloadsParams) SetSort(sort *bool) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *HeadAPIV2PayloadsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AddPath != nil {

		// query param add_path
		var qrAddPath bool

		if o.AddPath != nil {
			qrAddPath = *o.AddPath
		}
		qAddPath := swag.FormatBool(qrAddPath)
		if qAddPath != "" {

			if err := r.SetQueryParam("add_path", qAddPath); err != nil {
				return err
			}
		}
	}

	if o.ExcludePlugins != nil {

		// query param exclude_plugins
		var qrExcludePlugins bool

		if o.ExcludePlugins != nil {
			qrExcludePlugins = *o.ExcludePlugins
		}
		qExcludePlugins := swag.FormatBool(qrExcludePlugins)
		if qExcludePlugins != "" {

			if err := r.SetQueryParam("exclude_plugins", qExcludePlugins); err != nil {
				return err
			}
		}
	}

	if o.Sort != nil {

		// query param sort
		var qrSort bool

		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := swag.FormatBool(qrSort)
		if qSort != "" {

			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
