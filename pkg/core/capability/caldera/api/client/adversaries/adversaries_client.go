// Code generated by go-swagger; DO NOT EDIT.

package adversaries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new adversaries API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new adversaries API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new adversaries API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for adversaries API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIV2AdversariesAdversaryID(params *DeleteAPIV2AdversariesAdversaryIDParams, opts ...ClientOption) (*DeleteAPIV2AdversariesAdversaryIDNoContent, error)

	GetAPIV2Adversaries(params *GetAPIV2AdversariesParams, opts ...ClientOption) (*GetAPIV2AdversariesOK, error)

	GetAPIV2AdversariesAdversaryID(params *GetAPIV2AdversariesAdversaryIDParams, opts ...ClientOption) (*GetAPIV2AdversariesAdversaryIDOK, error)

	HeadAPIV2Adversaries(params *HeadAPIV2AdversariesParams, opts ...ClientOption) (*HeadAPIV2AdversariesOK, error)

	HeadAPIV2AdversariesAdversaryID(params *HeadAPIV2AdversariesAdversaryIDParams, opts ...ClientOption) (*HeadAPIV2AdversariesAdversaryIDOK, error)

	PatchAPIV2AdversariesAdversaryID(params *PatchAPIV2AdversariesAdversaryIDParams, opts ...ClientOption) (*PatchAPIV2AdversariesAdversaryIDOK, error)

	PostAPIV2Adversaries(params *PostAPIV2AdversariesParams, opts ...ClientOption) (*PostAPIV2AdversariesOK, error)

	PutAPIV2AdversariesAdversaryID(params *PutAPIV2AdversariesAdversaryIDParams, opts ...ClientOption) (*PutAPIV2AdversariesAdversaryIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAPIV2AdversariesAdversaryID deletes an adversary

Deletes an existing adversary.
*/
func (a *Client) DeleteAPIV2AdversariesAdversaryID(params *DeleteAPIV2AdversariesAdversaryIDParams, opts ...ClientOption) (*DeleteAPIV2AdversariesAdversaryIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV2AdversariesAdversaryIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIV2AdversariesAdversaryID",
		Method:             "DELETE",
		PathPattern:        "/api/v2/adversaries/{adversary_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV2AdversariesAdversaryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV2AdversariesAdversaryIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV2AdversariesAdversaryID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2Adversaries retrieves all adversaries

Returns a list of all available adversaries in the system, including plugin, name, description, and atomic ordering. Supply fields from the `AdversarySchema` to the include and exclude fields of the `BaseGetAllQuerySchema` in the request body to filter retrieved adversaries.
*/
func (a *Client) GetAPIV2Adversaries(params *GetAPIV2AdversariesParams, opts ...ClientOption) (*GetAPIV2AdversariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2AdversariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2Adversaries",
		Method:             "GET",
		PathPattern:        "/api/v2/adversaries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2AdversariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2AdversariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2Adversaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2AdversariesAdversaryID retrieves adversary by ID

Retrieve one adversary by ID. Use fields from the `AdversarySchema` in the request body to filter retrieved adversary.
*/
func (a *Client) GetAPIV2AdversariesAdversaryID(params *GetAPIV2AdversariesAdversaryIDParams, opts ...ClientOption) (*GetAPIV2AdversariesAdversaryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2AdversariesAdversaryIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2AdversariesAdversaryID",
		Method:             "GET",
		PathPattern:        "/api/v2/adversaries/{adversary_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2AdversariesAdversaryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2AdversariesAdversaryIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2AdversariesAdversaryID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2Adversaries retrieves all adversaries

Returns a list of all available adversaries in the system, including plugin, name, description, and atomic ordering. Supply fields from the `AdversarySchema` to the include and exclude fields of the `BaseGetAllQuerySchema` in the request body to filter retrieved adversaries.
*/
func (a *Client) HeadAPIV2Adversaries(params *HeadAPIV2AdversariesParams, opts ...ClientOption) (*HeadAPIV2AdversariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2AdversariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2Adversaries",
		Method:             "HEAD",
		PathPattern:        "/api/v2/adversaries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2AdversariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2AdversariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2Adversaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2AdversariesAdversaryID retrieves adversary by ID

Retrieve one adversary by ID. Use fields from the `AdversarySchema` in the request body to filter retrieved adversary.
*/
func (a *Client) HeadAPIV2AdversariesAdversaryID(params *HeadAPIV2AdversariesAdversaryIDParams, opts ...ClientOption) (*HeadAPIV2AdversariesAdversaryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2AdversariesAdversaryIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2AdversariesAdversaryID",
		Method:             "HEAD",
		PathPattern:        "/api/v2/adversaries/{adversary_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2AdversariesAdversaryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2AdversariesAdversaryIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2AdversariesAdversaryID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchAPIV2AdversariesAdversaryID updates an adversary

Update an adversary using fields from the `AdversarySchema` in the request body.
*/
func (a *Client) PatchAPIV2AdversariesAdversaryID(params *PatchAPIV2AdversariesAdversaryIDParams, opts ...ClientOption) (*PatchAPIV2AdversariesAdversaryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIV2AdversariesAdversaryIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIV2AdversariesAdversaryID",
		Method:             "PATCH",
		PathPattern:        "/api/v2/adversaries/{adversary_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPIV2AdversariesAdversaryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIV2AdversariesAdversaryIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIV2AdversariesAdversaryID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV2Adversaries creates a new adversary

Create a new adversary using the format provided in the `AdversarySchema`.
*/
func (a *Client) PostAPIV2Adversaries(params *PostAPIV2AdversariesParams, opts ...ClientOption) (*PostAPIV2AdversariesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2AdversariesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2Adversaries",
		Method:             "POST",
		PathPattern:        "/api/v2/adversaries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV2AdversariesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV2AdversariesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV2Adversaries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutAPIV2AdversariesAdversaryID creates or update an adversary

Attempt to update an adversaries using fields from the `AdversarySchema` in the request body. If the adversary does not already exist, then create a new one using the `AdversarySchema` format.
*/
func (a *Client) PutAPIV2AdversariesAdversaryID(params *PutAPIV2AdversariesAdversaryIDParams, opts ...ClientOption) (*PutAPIV2AdversariesAdversaryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV2AdversariesAdversaryIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAPIV2AdversariesAdversaryID",
		Method:             "PUT",
		PathPattern:        "/api/v2/adversaries/{adversary_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV2AdversariesAdversaryIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV2AdversariesAdversaryIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV2AdversariesAdversaryID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
