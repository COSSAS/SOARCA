// Code generated by go-swagger; DO NOT EDIT.

package agents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new agents API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new agents API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new agents API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for agents API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIV2AgentsPaw(params *DeleteAPIV2AgentsPawParams, opts ...ClientOption) (*DeleteAPIV2AgentsPawOK, error)

	GetAPIV2Agents(params *GetAPIV2AgentsParams, opts ...ClientOption) (*GetAPIV2AgentsOK, error)

	GetAPIV2AgentsPaw(params *GetAPIV2AgentsPawParams, opts ...ClientOption) (*GetAPIV2AgentsPawOK, error)

	GetAPIV2DeployCommands(params *GetAPIV2DeployCommandsParams, opts ...ClientOption) (*GetAPIV2DeployCommandsOK, error)

	GetAPIV2DeployCommandsAbilityID(params *GetAPIV2DeployCommandsAbilityIDParams, opts ...ClientOption) (*GetAPIV2DeployCommandsAbilityIDOK, error)

	HeadAPIV2Agents(params *HeadAPIV2AgentsParams, opts ...ClientOption) (*HeadAPIV2AgentsOK, error)

	HeadAPIV2AgentsPaw(params *HeadAPIV2AgentsPawParams, opts ...ClientOption) (*HeadAPIV2AgentsPawOK, error)

	HeadAPIV2DeployCommands(params *HeadAPIV2DeployCommandsParams, opts ...ClientOption) (*HeadAPIV2DeployCommandsOK, error)

	HeadAPIV2DeployCommandsAbilityID(params *HeadAPIV2DeployCommandsAbilityIDParams, opts ...ClientOption) (*HeadAPIV2DeployCommandsAbilityIDOK, error)

	PatchAPIV2AgentsPaw(params *PatchAPIV2AgentsPawParams, opts ...ClientOption) (*PatchAPIV2AgentsPawOK, error)

	PostAPIV2Agents(params *PostAPIV2AgentsParams, opts ...ClientOption) (*PostAPIV2AgentsOK, error)

	PutAPIV2AgentsPaw(params *PutAPIV2AgentsPawParams, opts ...ClientOption) (*PutAPIV2AgentsPawOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAPIV2AgentsPaw deletes an agent

Delete an agent. Use the paw field in the URL to specify matching criteria for the agent(s) to delete.
*/
func (a *Client) DeleteAPIV2AgentsPaw(params *DeleteAPIV2AgentsPawParams, opts ...ClientOption) (*DeleteAPIV2AgentsPawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV2AgentsPawParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIV2AgentsPaw",
		Method:             "DELETE",
		PathPattern:        "/api/v2/agents/{paw}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV2AgentsPawReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV2AgentsPawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV2AgentsPaw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2Agents retrieves all agents

Retrieves all stored agents.
*/
func (a *Client) GetAPIV2Agents(params *GetAPIV2AgentsParams, opts ...ClientOption) (*GetAPIV2AgentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2AgentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2Agents",
		Method:             "GET",
		PathPattern:        "/api/v2/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2AgentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2AgentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2Agents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2AgentsPaw retrieves agent by paw

Retrieve information about a specific agent using its ID (paw). Use the paw field in the URL to specify matching criteria for the agent to obtain information about.
*/
func (a *Client) GetAPIV2AgentsPaw(params *GetAPIV2AgentsPawParams, opts ...ClientOption) (*GetAPIV2AgentsPawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2AgentsPawParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2AgentsPaw",
		Method:             "GET",
		PathPattern:        "/api/v2/agents/{paw}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2AgentsPawReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2AgentsPawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2AgentsPaw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2DeployCommands retrieves deploy commands

Retrieve the deploy commands currently configured within Caldera.
*/
func (a *Client) GetAPIV2DeployCommands(params *GetAPIV2DeployCommandsParams, opts ...ClientOption) (*GetAPIV2DeployCommandsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2DeployCommandsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2DeployCommands",
		Method:             "GET",
		PathPattern:        "/api/v2/deploy_commands",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2DeployCommandsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2DeployCommandsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2DeployCommands: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2DeployCommandsAbilityID retrieves deploy commands for an ability

Retrieve the deploy commands associated with a given ability ID. Use the 'ability_id' field in the URL specify which ability to retrieve deploy commands for.
*/
func (a *Client) GetAPIV2DeployCommandsAbilityID(params *GetAPIV2DeployCommandsAbilityIDParams, opts ...ClientOption) (*GetAPIV2DeployCommandsAbilityIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2DeployCommandsAbilityIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2DeployCommandsAbilityID",
		Method:             "GET",
		PathPattern:        "/api/v2/deploy_commands/{ability_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2DeployCommandsAbilityIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2DeployCommandsAbilityIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2DeployCommandsAbilityID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2Agents retrieves all agents

Retrieves all stored agents.
*/
func (a *Client) HeadAPIV2Agents(params *HeadAPIV2AgentsParams, opts ...ClientOption) (*HeadAPIV2AgentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2AgentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2Agents",
		Method:             "HEAD",
		PathPattern:        "/api/v2/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2AgentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2AgentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2Agents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2AgentsPaw retrieves agent by paw

Retrieve information about a specific agent using its ID (paw). Use the paw field in the URL to specify matching criteria for the agent to obtain information about.
*/
func (a *Client) HeadAPIV2AgentsPaw(params *HeadAPIV2AgentsPawParams, opts ...ClientOption) (*HeadAPIV2AgentsPawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2AgentsPawParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2AgentsPaw",
		Method:             "HEAD",
		PathPattern:        "/api/v2/agents/{paw}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2AgentsPawReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2AgentsPawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2AgentsPaw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2DeployCommands retrieves deploy commands

Retrieve the deploy commands currently configured within Caldera.
*/
func (a *Client) HeadAPIV2DeployCommands(params *HeadAPIV2DeployCommandsParams, opts ...ClientOption) (*HeadAPIV2DeployCommandsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2DeployCommandsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2DeployCommands",
		Method:             "HEAD",
		PathPattern:        "/api/v2/deploy_commands",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2DeployCommandsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2DeployCommandsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2DeployCommands: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2DeployCommandsAbilityID retrieves deploy commands for an ability

Retrieve the deploy commands associated with a given ability ID. Use the 'ability_id' field in the URL specify which ability to retrieve deploy commands for.
*/
func (a *Client) HeadAPIV2DeployCommandsAbilityID(params *HeadAPIV2DeployCommandsAbilityIDParams, opts ...ClientOption) (*HeadAPIV2DeployCommandsAbilityIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2DeployCommandsAbilityIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2DeployCommandsAbilityID",
		Method:             "HEAD",
		PathPattern:        "/api/v2/deploy_commands/{ability_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2DeployCommandsAbilityIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2DeployCommandsAbilityIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2DeployCommandsAbilityID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchAPIV2AgentsPaw updates an agent

Update the attributes of a specific Agent using its ID (paw). Use the paw field in the URL to specify matching criteria and the fields from the AgentSchema in the request body to specify updated field values.
*/
func (a *Client) PatchAPIV2AgentsPaw(params *PatchAPIV2AgentsPawParams, opts ...ClientOption) (*PatchAPIV2AgentsPawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIV2AgentsPawParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIV2AgentsPaw",
		Method:             "PATCH",
		PathPattern:        "/api/v2/agents/{paw}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPIV2AgentsPawReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIV2AgentsPawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIV2AgentsPaw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV2Agents creates a new agent

Creates a new agent using the format from 'AgentSchema'.
*/
func (a *Client) PostAPIV2Agents(params *PostAPIV2AgentsParams, opts ...ClientOption) (*PostAPIV2AgentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2AgentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2Agents",
		Method:             "POST",
		PathPattern:        "/api/v2/agents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV2AgentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV2AgentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV2Agents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutAPIV2AgentsPaw creates or update an agent

Update an agent, or if a existing agent match cannot be found, create one. Use the paw field in the URL to specify matching criteria and the fields from the AgentSchema in the request body to specify new field values.
*/
func (a *Client) PutAPIV2AgentsPaw(params *PutAPIV2AgentsPawParams, opts ...ClientOption) (*PutAPIV2AgentsPawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV2AgentsPawParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAPIV2AgentsPaw",
		Method:             "PUT",
		PathPattern:        "/api/v2/agents/{paw}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV2AgentsPawReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV2AgentsPawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV2AgentsPaw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
