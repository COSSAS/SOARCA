// Code generated by go-swagger; DO NOT EDIT.

package objectives

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new objectives API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new objectives API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new objectives API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for objectives API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetAPIV2Objectives(params *GetAPIV2ObjectivesParams, opts ...ClientOption) (*GetAPIV2ObjectivesOK, error)

	GetAPIV2ObjectivesID(params *GetAPIV2ObjectivesIDParams, opts ...ClientOption) (*GetAPIV2ObjectivesIDOK, error)

	HeadAPIV2Objectives(params *HeadAPIV2ObjectivesParams, opts ...ClientOption) (*HeadAPIV2ObjectivesOK, error)

	HeadAPIV2ObjectivesID(params *HeadAPIV2ObjectivesIDParams, opts ...ClientOption) (*HeadAPIV2ObjectivesIDOK, error)

	PatchAPIV2ObjectivesID(params *PatchAPIV2ObjectivesIDParams, opts ...ClientOption) (*PatchAPIV2ObjectivesIDOK, error)

	PostAPIV2Objectives(params *PostAPIV2ObjectivesParams, opts ...ClientOption) (*PostAPIV2ObjectivesOK, error)

	PutAPIV2ObjectivesID(params *PutAPIV2ObjectivesIDParams, opts ...ClientOption) (*PutAPIV2ObjectivesIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetAPIV2Objectives retrieves objectives

Retrieve all objectives by criteria. Use fields from the `ObjectiveSchema` in the request body to filter retrieved objectives.
*/
func (a *Client) GetAPIV2Objectives(params *GetAPIV2ObjectivesParams, opts ...ClientOption) (*GetAPIV2ObjectivesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2ObjectivesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2Objectives",
		Method:             "GET",
		PathPattern:        "/api/v2/objectives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2ObjectivesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2ObjectivesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2Objectives: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2ObjectivesID retrieves objective by ID

Retrieve one objective by ID. Use fields from the `ObjectiveSchema` in the request body to filter retrieved objective.
*/
func (a *Client) GetAPIV2ObjectivesID(params *GetAPIV2ObjectivesIDParams, opts ...ClientOption) (*GetAPIV2ObjectivesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2ObjectivesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2ObjectivesID",
		Method:             "GET",
		PathPattern:        "/api/v2/objectives/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2ObjectivesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2ObjectivesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2ObjectivesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2Objectives retrieves objectives

Retrieve all objectives by criteria. Use fields from the `ObjectiveSchema` in the request body to filter retrieved objectives.
*/
func (a *Client) HeadAPIV2Objectives(params *HeadAPIV2ObjectivesParams, opts ...ClientOption) (*HeadAPIV2ObjectivesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2ObjectivesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2Objectives",
		Method:             "HEAD",
		PathPattern:        "/api/v2/objectives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2ObjectivesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2ObjectivesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2Objectives: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2ObjectivesID retrieves objective by ID

Retrieve one objective by ID. Use fields from the `ObjectiveSchema` in the request body to filter retrieved objective.
*/
func (a *Client) HeadAPIV2ObjectivesID(params *HeadAPIV2ObjectivesIDParams, opts ...ClientOption) (*HeadAPIV2ObjectivesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2ObjectivesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2ObjectivesID",
		Method:             "HEAD",
		PathPattern:        "/api/v2/objectives/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2ObjectivesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2ObjectivesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2ObjectivesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchAPIV2ObjectivesID updates an objective

Update an objective using fields from the `ObjectiveSchema` in the request body.
*/
func (a *Client) PatchAPIV2ObjectivesID(params *PatchAPIV2ObjectivesIDParams, opts ...ClientOption) (*PatchAPIV2ObjectivesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIV2ObjectivesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIV2ObjectivesID",
		Method:             "PATCH",
		PathPattern:        "/api/v2/objectives/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPIV2ObjectivesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIV2ObjectivesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIV2ObjectivesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV2Objectives creates a new objective

Create a new objective using the format provided in the `ObjectiveSchema`.
*/
func (a *Client) PostAPIV2Objectives(params *PostAPIV2ObjectivesParams, opts ...ClientOption) (*PostAPIV2ObjectivesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2ObjectivesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2Objectives",
		Method:             "POST",
		PathPattern:        "/api/v2/objectives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV2ObjectivesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV2ObjectivesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV2Objectives: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutAPIV2ObjectivesID creates or update an objective

Attempt to update an objective using fields from the `ObjectiveSchema` in the request body. If the objective does not already exist, then create a new one using the `ObjectiveSchema` format.
*/
func (a *Client) PutAPIV2ObjectivesID(params *PutAPIV2ObjectivesIDParams, opts ...ClientOption) (*PutAPIV2ObjectivesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV2ObjectivesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAPIV2ObjectivesID",
		Method:             "PUT",
		PathPattern:        "/api/v2/objectives/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV2ObjectivesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV2ObjectivesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV2ObjectivesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
