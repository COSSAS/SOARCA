// Code generated by go-swagger; DO NOT EDIT.

package operationsops

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new operationsops API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new operationsops API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new operationsops API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for operationsops API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIV2OperationsID(params *DeleteAPIV2OperationsIDParams, opts ...ClientOption) (*DeleteAPIV2OperationsIDOK, error)

	GetAPIV2Operations(params *GetAPIV2OperationsParams, opts ...ClientOption) (*GetAPIV2OperationsOK, error)

	GetAPIV2OperationsID(params *GetAPIV2OperationsIDParams, opts ...ClientOption) (*GetAPIV2OperationsIDOK, error)

	GetAPIV2OperationsIDLinks(params *GetAPIV2OperationsIDLinksParams, opts ...ClientOption) (*GetAPIV2OperationsIDLinksOK, error)

	GetAPIV2OperationsIDLinksLinkID(params *GetAPIV2OperationsIDLinksLinkIDParams, opts ...ClientOption) (*GetAPIV2OperationsIDLinksLinkIDOK, error)

	GetAPIV2OperationsIDLinksLinkIDResult(params *GetAPIV2OperationsIDLinksLinkIDResultParams, opts ...ClientOption) (*GetAPIV2OperationsIDLinksLinkIDResultOK, error)

	GetAPIV2OperationsIDPotentialLinks(params *GetAPIV2OperationsIDPotentialLinksParams, opts ...ClientOption) (*GetAPIV2OperationsIDPotentialLinksOK, error)

	GetAPIV2OperationsIDPotentialLinksPaw(params *GetAPIV2OperationsIDPotentialLinksPawParams, opts ...ClientOption) (*GetAPIV2OperationsIDPotentialLinksPawOK, error)

	GetAPIV2OperationsSummary(params *GetAPIV2OperationsSummaryParams, opts ...ClientOption) (*GetAPIV2OperationsSummaryOK, error)

	HeadAPIV2Operations(params *HeadAPIV2OperationsParams, opts ...ClientOption) (*HeadAPIV2OperationsOK, error)

	HeadAPIV2OperationsID(params *HeadAPIV2OperationsIDParams, opts ...ClientOption) (*HeadAPIV2OperationsIDOK, error)

	HeadAPIV2OperationsIDLinks(params *HeadAPIV2OperationsIDLinksParams, opts ...ClientOption) (*HeadAPIV2OperationsIDLinksOK, error)

	HeadAPIV2OperationsIDLinksLinkID(params *HeadAPIV2OperationsIDLinksLinkIDParams, opts ...ClientOption) (*HeadAPIV2OperationsIDLinksLinkIDOK, error)

	HeadAPIV2OperationsIDLinksLinkIDResult(params *HeadAPIV2OperationsIDLinksLinkIDResultParams, opts ...ClientOption) (*HeadAPIV2OperationsIDLinksLinkIDResultOK, error)

	HeadAPIV2OperationsIDPotentialLinks(params *HeadAPIV2OperationsIDPotentialLinksParams, opts ...ClientOption) (*HeadAPIV2OperationsIDPotentialLinksOK, error)

	HeadAPIV2OperationsIDPotentialLinksPaw(params *HeadAPIV2OperationsIDPotentialLinksPawParams, opts ...ClientOption) (*HeadAPIV2OperationsIDPotentialLinksPawOK, error)

	HeadAPIV2OperationsSummary(params *HeadAPIV2OperationsSummaryParams, opts ...ClientOption) (*HeadAPIV2OperationsSummaryOK, error)

	PatchAPIV2OperationsID(params *PatchAPIV2OperationsIDParams, opts ...ClientOption) (*PatchAPIV2OperationsIDOK, error)

	PatchAPIV2OperationsIDLinksLinkID(params *PatchAPIV2OperationsIDLinksLinkIDParams, opts ...ClientOption) (*PatchAPIV2OperationsIDLinksLinkIDOK, error)

	PostAPIV2Operations(params *PostAPIV2OperationsParams, opts ...ClientOption) (*PostAPIV2OperationsOK, error)

	PostAPIV2OperationsIDEventLogs(params *PostAPIV2OperationsIDEventLogsParams, opts ...ClientOption) (*PostAPIV2OperationsIDEventLogsOK, error)

	PostAPIV2OperationsIDPotentialLinks(params *PostAPIV2OperationsIDPotentialLinksParams, opts ...ClientOption) (*PostAPIV2OperationsIDPotentialLinksOK, error)

	PostAPIV2OperationsIDReport(params *PostAPIV2OperationsIDReportParams, opts ...ClientOption) (*PostAPIV2OperationsIDReportOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAPIV2OperationsID deletes an operation by operation id

Delete one Caldera operation from memory based on the operation id (String UUID).
*/
func (a *Client) DeleteAPIV2OperationsID(params *DeleteAPIV2OperationsIDParams, opts ...ClientOption) (*DeleteAPIV2OperationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV2OperationsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIV2OperationsID",
		Method:             "DELETE",
		PathPattern:        "/api/v2/operations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV2OperationsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV2OperationsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV2OperationsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2Operations retrieves operations

Retrieve all Caldera operations from memory.  Use fields from the `BaseGetAllQuerySchema` in the request body to filter.
*/
func (a *Client) GetAPIV2Operations(params *GetAPIV2OperationsParams, opts ...ClientOption) (*GetAPIV2OperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2OperationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2Operations",
		Method:             "GET",
		PathPattern:        "/api/v2/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2OperationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2OperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2Operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2OperationsID retrieves an operation by operation id

Retrieve one Caldera operation from memory based on the operation id (String UUID).  Use fields from the `BaseGetOneQuerySchema` in the request body to add `include` and `exclude` filters.
*/
func (a *Client) GetAPIV2OperationsID(params *GetAPIV2OperationsIDParams, opts ...ClientOption) (*GetAPIV2OperationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2OperationsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2OperationsID",
		Method:             "GET",
		PathPattern:        "/api/v2/operations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2OperationsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2OperationsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2OperationsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2OperationsIDLinks gets links from operation

Retrieves all links for a given operation_id.
*/
func (a *Client) GetAPIV2OperationsIDLinks(params *GetAPIV2OperationsIDLinksParams, opts ...ClientOption) (*GetAPIV2OperationsIDLinksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2OperationsIDLinksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2OperationsIDLinks",
		Method:             "GET",
		PathPattern:        "/api/v2/operations/{id}/links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2OperationsIDLinksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2OperationsIDLinksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2OperationsIDLinks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2OperationsIDLinksLinkID retrieves a specified link from an operation

Retrieve the link with the provided `link_id` (String UUID) from the operation with the given operation `id` (String UUID). Use fields from the `BaseGetOneQuerySchema` in the request body to add `include` and `exclude` filters.
*/
func (a *Client) GetAPIV2OperationsIDLinksLinkID(params *GetAPIV2OperationsIDLinksLinkIDParams, opts ...ClientOption) (*GetAPIV2OperationsIDLinksLinkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2OperationsIDLinksLinkIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2OperationsIDLinksLinkID",
		Method:             "GET",
		PathPattern:        "/api/v2/operations/{id}/links/{link_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2OperationsIDLinksLinkIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2OperationsIDLinksLinkIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2OperationsIDLinksLinkID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2OperationsIDLinksLinkIDResult retrieves the result of a link

Retrieve a dictionary containing a link and its results dictionary based on the operation id (String UUID) and link id (String UUID).  Use fields from the `BaseGetOneQuerySchema` in the request body to add `include` and `exclude` filters.
*/
func (a *Client) GetAPIV2OperationsIDLinksLinkIDResult(params *GetAPIV2OperationsIDLinksLinkIDResultParams, opts ...ClientOption) (*GetAPIV2OperationsIDLinksLinkIDResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2OperationsIDLinksLinkIDResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2OperationsIDLinksLinkIDResult",
		Method:             "GET",
		PathPattern:        "/api/v2/operations/{id}/links/{link_id}/result",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2OperationsIDLinksLinkIDResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2OperationsIDLinksLinkIDResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2OperationsIDLinksLinkIDResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2OperationsIDPotentialLinks retrieves potential links for an operation

Retrieve all potential links for an operation based on the operation id (String UUID).  Use fields from the `BaseGetAllQuerySchema` in the request body to add `include`, `exclude`, and `sort` filters.
*/
func (a *Client) GetAPIV2OperationsIDPotentialLinks(params *GetAPIV2OperationsIDPotentialLinksParams, opts ...ClientOption) (*GetAPIV2OperationsIDPotentialLinksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2OperationsIDPotentialLinksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2OperationsIDPotentialLinks",
		Method:             "GET",
		PathPattern:        "/api/v2/operations/{id}/potential-links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2OperationsIDPotentialLinksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2OperationsIDPotentialLinksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2OperationsIDPotentialLinks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2OperationsIDPotentialLinksPaw retrieves potential links for an operation filterd by agent paw id

Retrieve all potential links for an operation-agent pair based on the operation id (String UUID) and the agent paw (id) (String).  Use fields from the `BaseGetAllQuerySchema` in the request body to add `include`, `exclude`, and `sort` filters.
*/
func (a *Client) GetAPIV2OperationsIDPotentialLinksPaw(params *GetAPIV2OperationsIDPotentialLinksPawParams, opts ...ClientOption) (*GetAPIV2OperationsIDPotentialLinksPawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2OperationsIDPotentialLinksPawParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2OperationsIDPotentialLinksPaw",
		Method:             "GET",
		PathPattern:        "/api/v2/operations/{id}/potential-links/{paw}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2OperationsIDPotentialLinksPawReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2OperationsIDPotentialLinksPawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2OperationsIDPotentialLinksPaw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2OperationsSummary retrieves operations alternate

Retrieve all Caldera operations from memory, with an alternate selection of properties. Use fields from the `BaseGetAllQuerySchema` in the request body to filter.
*/
func (a *Client) GetAPIV2OperationsSummary(params *GetAPIV2OperationsSummaryParams, opts ...ClientOption) (*GetAPIV2OperationsSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2OperationsSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2OperationsSummary",
		Method:             "GET",
		PathPattern:        "/api/v2/operations/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2OperationsSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2OperationsSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2OperationsSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2Operations retrieves operations

Retrieve all Caldera operations from memory.  Use fields from the `BaseGetAllQuerySchema` in the request body to filter.
*/
func (a *Client) HeadAPIV2Operations(params *HeadAPIV2OperationsParams, opts ...ClientOption) (*HeadAPIV2OperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2OperationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2Operations",
		Method:             "HEAD",
		PathPattern:        "/api/v2/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2OperationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2OperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2Operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2OperationsID retrieves an operation by operation id

Retrieve one Caldera operation from memory based on the operation id (String UUID).  Use fields from the `BaseGetOneQuerySchema` in the request body to add `include` and `exclude` filters.
*/
func (a *Client) HeadAPIV2OperationsID(params *HeadAPIV2OperationsIDParams, opts ...ClientOption) (*HeadAPIV2OperationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2OperationsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2OperationsID",
		Method:             "HEAD",
		PathPattern:        "/api/v2/operations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2OperationsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2OperationsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2OperationsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2OperationsIDLinks gets links from operation

Retrieves all links for a given operation_id.
*/
func (a *Client) HeadAPIV2OperationsIDLinks(params *HeadAPIV2OperationsIDLinksParams, opts ...ClientOption) (*HeadAPIV2OperationsIDLinksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2OperationsIDLinksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2OperationsIDLinks",
		Method:             "HEAD",
		PathPattern:        "/api/v2/operations/{id}/links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2OperationsIDLinksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2OperationsIDLinksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2OperationsIDLinks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2OperationsIDLinksLinkID retrieves a specified link from an operation

Retrieve the link with the provided `link_id` (String UUID) from the operation with the given operation `id` (String UUID). Use fields from the `BaseGetOneQuerySchema` in the request body to add `include` and `exclude` filters.
*/
func (a *Client) HeadAPIV2OperationsIDLinksLinkID(params *HeadAPIV2OperationsIDLinksLinkIDParams, opts ...ClientOption) (*HeadAPIV2OperationsIDLinksLinkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2OperationsIDLinksLinkIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2OperationsIDLinksLinkID",
		Method:             "HEAD",
		PathPattern:        "/api/v2/operations/{id}/links/{link_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2OperationsIDLinksLinkIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2OperationsIDLinksLinkIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2OperationsIDLinksLinkID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2OperationsIDLinksLinkIDResult retrieves the result of a link

Retrieve a dictionary containing a link and its results dictionary based on the operation id (String UUID) and link id (String UUID).  Use fields from the `BaseGetOneQuerySchema` in the request body to add `include` and `exclude` filters.
*/
func (a *Client) HeadAPIV2OperationsIDLinksLinkIDResult(params *HeadAPIV2OperationsIDLinksLinkIDResultParams, opts ...ClientOption) (*HeadAPIV2OperationsIDLinksLinkIDResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2OperationsIDLinksLinkIDResultParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2OperationsIDLinksLinkIDResult",
		Method:             "HEAD",
		PathPattern:        "/api/v2/operations/{id}/links/{link_id}/result",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2OperationsIDLinksLinkIDResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2OperationsIDLinksLinkIDResultOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2OperationsIDLinksLinkIDResult: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2OperationsIDPotentialLinks retrieves potential links for an operation

Retrieve all potential links for an operation based on the operation id (String UUID).  Use fields from the `BaseGetAllQuerySchema` in the request body to add `include`, `exclude`, and `sort` filters.
*/
func (a *Client) HeadAPIV2OperationsIDPotentialLinks(params *HeadAPIV2OperationsIDPotentialLinksParams, opts ...ClientOption) (*HeadAPIV2OperationsIDPotentialLinksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2OperationsIDPotentialLinksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2OperationsIDPotentialLinks",
		Method:             "HEAD",
		PathPattern:        "/api/v2/operations/{id}/potential-links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2OperationsIDPotentialLinksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2OperationsIDPotentialLinksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2OperationsIDPotentialLinks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2OperationsIDPotentialLinksPaw retrieves potential links for an operation filterd by agent paw id

Retrieve all potential links for an operation-agent pair based on the operation id (String UUID) and the agent paw (id) (String).  Use fields from the `BaseGetAllQuerySchema` in the request body to add `include`, `exclude`, and `sort` filters.
*/
func (a *Client) HeadAPIV2OperationsIDPotentialLinksPaw(params *HeadAPIV2OperationsIDPotentialLinksPawParams, opts ...ClientOption) (*HeadAPIV2OperationsIDPotentialLinksPawOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2OperationsIDPotentialLinksPawParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2OperationsIDPotentialLinksPaw",
		Method:             "HEAD",
		PathPattern:        "/api/v2/operations/{id}/potential-links/{paw}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2OperationsIDPotentialLinksPawReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2OperationsIDPotentialLinksPawOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2OperationsIDPotentialLinksPaw: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2OperationsSummary retrieves operations alternate

Retrieve all Caldera operations from memory, with an alternate selection of properties. Use fields from the `BaseGetAllQuerySchema` in the request body to filter.
*/
func (a *Client) HeadAPIV2OperationsSummary(params *HeadAPIV2OperationsSummaryParams, opts ...ClientOption) (*HeadAPIV2OperationsSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2OperationsSummaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2OperationsSummary",
		Method:             "HEAD",
		PathPattern:        "/api/v2/operations/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2OperationsSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2OperationsSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2OperationsSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchAPIV2OperationsID updates fields within an operation

Update one Caldera operation in memory based on the operation id (String UUID). The `state`, `autonomous` and `obfuscator` fields in the operation object may be edited in the request body using the `OperationSchema`.
*/
func (a *Client) PatchAPIV2OperationsID(params *PatchAPIV2OperationsIDParams, opts ...ClientOption) (*PatchAPIV2OperationsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIV2OperationsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIV2OperationsID",
		Method:             "PATCH",
		PathPattern:        "/api/v2/operations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPIV2OperationsIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIV2OperationsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIV2OperationsID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchAPIV2OperationsIDLinksLinkID updates the specified link within an operation

Update the `command` (String) or `status` (Integer) field within the link with the provided  `link_id` (String UUID) from the operation with the given operation `id` (String UUID).
*/
func (a *Client) PatchAPIV2OperationsIDLinksLinkID(params *PatchAPIV2OperationsIDLinksLinkIDParams, opts ...ClientOption) (*PatchAPIV2OperationsIDLinksLinkIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIV2OperationsIDLinksLinkIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIV2OperationsIDLinksLinkID",
		Method:             "PATCH",
		PathPattern:        "/api/v2/operations/{id}/links/{link_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPIV2OperationsIDLinksLinkIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIV2OperationsIDLinksLinkIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIV2OperationsIDLinksLinkID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV2Operations creates a new caldera operation record

Create a new Caldera operation using the format provided in the `OperationSchema`. Required schema fields are as follows: "name", "adversary.adversary_id", "planner.id", and "source.id"
*/
func (a *Client) PostAPIV2Operations(params *PostAPIV2OperationsParams, opts ...ClientOption) (*PostAPIV2OperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2OperationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2Operations",
		Method:             "POST",
		PathPattern:        "/api/v2/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV2OperationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV2OperationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV2Operations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV2OperationsIDEventLogs gets operation event logs

Retrieves the event logs for a given operation_id.
*/
func (a *Client) PostAPIV2OperationsIDEventLogs(params *PostAPIV2OperationsIDEventLogsParams, opts ...ClientOption) (*PostAPIV2OperationsIDEventLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2OperationsIDEventLogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2OperationsIDEventLogs",
		Method:             "POST",
		PathPattern:        "/api/v2/operations/{id}/event-logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV2OperationsIDEventLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV2OperationsIDEventLogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV2OperationsIDEventLogs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV2OperationsIDPotentialLinks creates a potential link

Creates a potential link to be executed by an agent. Create a potential Link using the format provided in the `LinkSchema`. The request body requires `paw`, `executor`, and `ability`.
*/
func (a *Client) PostAPIV2OperationsIDPotentialLinks(params *PostAPIV2OperationsIDPotentialLinksParams, opts ...ClientOption) (*PostAPIV2OperationsIDPotentialLinksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2OperationsIDPotentialLinksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2OperationsIDPotentialLinks",
		Method:             "POST",
		PathPattern:        "/api/v2/operations/{id}/potential-links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV2OperationsIDPotentialLinksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV2OperationsIDPotentialLinksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV2OperationsIDPotentialLinks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV2OperationsIDReport gets operation report

Retrieves the report for a given operation_id.
*/
func (a *Client) PostAPIV2OperationsIDReport(params *PostAPIV2OperationsIDReportParams, opts ...ClientOption) (*PostAPIV2OperationsIDReportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2OperationsIDReportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2OperationsIDReport",
		Method:             "POST",
		PathPattern:        "/api/v2/operations/{id}/report",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV2OperationsIDReportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV2OperationsIDReportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV2OperationsIDReport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
