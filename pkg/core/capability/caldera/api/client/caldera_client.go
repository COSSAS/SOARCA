// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"soarca/pkg/core/capability/caldera/api/client/abilities"
	"soarca/pkg/core/capability/caldera/api/client/adversaries"
	"soarca/pkg/core/capability/caldera/api/client/agents"
	"soarca/pkg/core/capability/caldera/api/client/config"
	"soarca/pkg/core/capability/caldera/api/client/contacts"
	"soarca/pkg/core/capability/caldera/api/client/facts"
	"soarca/pkg/core/capability/caldera/api/client/health"
	"soarca/pkg/core/capability/caldera/api/client/obfuscators"
	"soarca/pkg/core/capability/caldera/api/client/objectives"
	"soarca/pkg/core/capability/caldera/api/client/operationsops"
	"soarca/pkg/core/capability/caldera/api/client/payloads"
	"soarca/pkg/core/capability/caldera/api/client/planners"
	"soarca/pkg/core/capability/caldera/api/client/plugins"
	"soarca/pkg/core/capability/caldera/api/client/relationships"
	"soarca/pkg/core/capability/caldera/api/client/schedules"
	"soarca/pkg/core/capability/caldera/api/client/sources"
)

// Default caldera HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

// NewHTTPClient creates a new caldera HTTP client.
func NewHTTPClient(formats strfmt.Registry) *Caldera {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new caldera HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *Caldera {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new caldera client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Caldera {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(Caldera)
	cli.Transport = transport
	cli.Abilities = abilities.New(transport, formats)
	cli.Adversaries = adversaries.New(transport, formats)
	cli.Agents = agents.New(transport, formats)
	cli.Config = config.New(transport, formats)
	cli.Contacts = contacts.New(transport, formats)
	cli.Facts = facts.New(transport, formats)
	cli.Health = health.New(transport, formats)
	cli.Obfuscators = obfuscators.New(transport, formats)
	cli.Objectives = objectives.New(transport, formats)
	cli.Operationsops = operationsops.New(transport, formats)
	cli.Payloads = payloads.New(transport, formats)
	cli.Planners = planners.New(transport, formats)
	cli.Plugins = plugins.New(transport, formats)
	cli.Relationships = relationships.New(transport, formats)
	cli.Schedules = schedules.New(transport, formats)
	cli.Sources = sources.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// Caldera is a client for caldera
type Caldera struct {
	Abilities abilities.ClientService

	Adversaries adversaries.ClientService

	Agents agents.ClientService

	Config config.ClientService

	Contacts contacts.ClientService

	Facts facts.ClientService

	Health health.ClientService

	Obfuscators obfuscators.ClientService

	Objectives objectives.ClientService

	Operationsops operationsops.ClientService

	Payloads payloads.ClientService

	Planners planners.ClientService

	Plugins plugins.ClientService

	Relationships relationships.ClientService

	Schedules schedules.ClientService

	Sources sources.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *Caldera) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Abilities.SetTransport(transport)
	c.Adversaries.SetTransport(transport)
	c.Agents.SetTransport(transport)
	c.Config.SetTransport(transport)
	c.Contacts.SetTransport(transport)
	c.Facts.SetTransport(transport)
	c.Health.SetTransport(transport)
	c.Obfuscators.SetTransport(transport)
	c.Objectives.SetTransport(transport)
	c.Operationsops.SetTransport(transport)
	c.Payloads.SetTransport(transport)
	c.Planners.SetTransport(transport)
	c.Plugins.SetTransport(transport)
	c.Relationships.SetTransport(transport)
	c.Schedules.SetTransport(transport)
	c.Sources.SetTransport(transport)
}
