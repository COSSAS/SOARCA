// Code generated by go-swagger; DO NOT EDIT.

package relationships

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new relationships API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new relationships API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new relationships API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for relationships API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIV2Relationships(params *DeleteAPIV2RelationshipsParams, opts ...ClientOption) (*DeleteAPIV2RelationshipsOK, error)

	GetAPIV2Relationships(params *GetAPIV2RelationshipsParams, opts ...ClientOption) (*GetAPIV2RelationshipsOK, error)

	GetAPIV2RelationshipsOperationID(params *GetAPIV2RelationshipsOperationIDParams, opts ...ClientOption) (*GetAPIV2RelationshipsOperationIDOK, error)

	HeadAPIV2Relationships(params *HeadAPIV2RelationshipsParams, opts ...ClientOption) (*HeadAPIV2RelationshipsOK, error)

	HeadAPIV2RelationshipsOperationID(params *HeadAPIV2RelationshipsOperationIDParams, opts ...ClientOption) (*HeadAPIV2RelationshipsOperationIDOK, error)

	PatchAPIV2Relationships(params *PatchAPIV2RelationshipsParams, opts ...ClientOption) (*PatchAPIV2RelationshipsOK, error)

	PostAPIV2Relationships(params *PostAPIV2RelationshipsParams, opts ...ClientOption) (*PostAPIV2RelationshipsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAPIV2Relationships deletes one or more relationships

Delete relationships using the format provided in the RelationshipSchema. This will delete all relationships that match the criteria specified in the payload.
*/
func (a *Client) DeleteAPIV2Relationships(params *DeleteAPIV2RelationshipsParams, opts ...ClientOption) (*DeleteAPIV2RelationshipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV2RelationshipsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIV2Relationships",
		Method:             "DELETE",
		PathPattern:        "/api/v2/relationships",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV2RelationshipsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV2RelationshipsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV2Relationships: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2Relationships retrieves relationships

Retrieve relationships by criteria. Use fields from the `RelationshipSchema` in the request body to filter retrieved relationships.
*/
func (a *Client) GetAPIV2Relationships(params *GetAPIV2RelationshipsParams, opts ...ClientOption) (*GetAPIV2RelationshipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2RelationshipsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2Relationships",
		Method:             "GET",
		PathPattern:        "/api/v2/relationships",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2RelationshipsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2RelationshipsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2Relationships: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2RelationshipsOperationID retrieves relationships by operation id

Retrieve relationships associated with an operation. Returned relationships will be either user-generated relationships or learned relationships.
*/
func (a *Client) GetAPIV2RelationshipsOperationID(params *GetAPIV2RelationshipsOperationIDParams, opts ...ClientOption) (*GetAPIV2RelationshipsOperationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2RelationshipsOperationIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2RelationshipsOperationID",
		Method:             "GET",
		PathPattern:        "/api/v2/relationships/{operation_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2RelationshipsOperationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2RelationshipsOperationIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2RelationshipsOperationID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2Relationships retrieves relationships

Retrieve relationships by criteria. Use fields from the `RelationshipSchema` in the request body to filter retrieved relationships.
*/
func (a *Client) HeadAPIV2Relationships(params *HeadAPIV2RelationshipsParams, opts ...ClientOption) (*HeadAPIV2RelationshipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2RelationshipsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2Relationships",
		Method:             "HEAD",
		PathPattern:        "/api/v2/relationships",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2RelationshipsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2RelationshipsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2Relationships: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2RelationshipsOperationID retrieves relationships by operation id

Retrieve relationships associated with an operation. Returned relationships will be either user-generated relationships or learned relationships.
*/
func (a *Client) HeadAPIV2RelationshipsOperationID(params *HeadAPIV2RelationshipsOperationIDParams, opts ...ClientOption) (*HeadAPIV2RelationshipsOperationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2RelationshipsOperationIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2RelationshipsOperationID",
		Method:             "HEAD",
		PathPattern:        "/api/v2/relationships/{operation_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2RelationshipsOperationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2RelationshipsOperationIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2RelationshipsOperationID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchAPIV2Relationships updates one or more relationships

Update existing relationships using the format provided in the `RelationshipSchema`. This will update all relationships that match the criteria specified in the payload.
*/
func (a *Client) PatchAPIV2Relationships(params *PatchAPIV2RelationshipsParams, opts ...ClientOption) (*PatchAPIV2RelationshipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIV2RelationshipsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIV2Relationships",
		Method:             "PATCH",
		PathPattern:        "/api/v2/relationships",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPIV2RelationshipsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIV2RelationshipsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIV2Relationships: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV2Relationships creates a relationship

Create a new relationship using the format provided in the `RelationshipSchema`.
*/
func (a *Client) PostAPIV2Relationships(params *PostAPIV2RelationshipsParams, opts ...ClientOption) (*PostAPIV2RelationshipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2RelationshipsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2Relationships",
		Method:             "POST",
		PathPattern:        "/api/v2/relationships",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV2RelationshipsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV2RelationshipsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV2Relationships: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
