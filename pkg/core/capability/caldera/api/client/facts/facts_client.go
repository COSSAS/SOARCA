// Code generated by go-swagger; DO NOT EDIT.

package facts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new facts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new facts API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new facts API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for facts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIV2Facts(params *DeleteAPIV2FactsParams, opts ...ClientOption) (*DeleteAPIV2FactsOK, error)

	GetAPIV2Facts(params *GetAPIV2FactsParams, opts ...ClientOption) (*GetAPIV2FactsOK, error)

	GetAPIV2FactsOperationID(params *GetAPIV2FactsOperationIDParams, opts ...ClientOption) (*GetAPIV2FactsOperationIDOK, error)

	HeadAPIV2Facts(params *HeadAPIV2FactsParams, opts ...ClientOption) (*HeadAPIV2FactsOK, error)

	HeadAPIV2FactsOperationID(params *HeadAPIV2FactsOperationIDParams, opts ...ClientOption) (*HeadAPIV2FactsOperationIDOK, error)

	PatchAPIV2Facts(params *PatchAPIV2FactsParams, opts ...ClientOption) (*PatchAPIV2FactsOK, error)

	PostAPIV2Facts(params *PostAPIV2FactsParams, opts ...ClientOption) (*PostAPIV2FactsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAPIV2Facts deletes one or more facts

Delete facts using the format provided in the `FactSchema`. This will delete all facts that match the criteria specified in the payload.
*/
func (a *Client) DeleteAPIV2Facts(params *DeleteAPIV2FactsParams, opts ...ClientOption) (*DeleteAPIV2FactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV2FactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIV2Facts",
		Method:             "DELETE",
		PathPattern:        "/api/v2/facts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV2FactsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV2FactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV2Facts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2Facts retrieves facts

Retrieve facts by criteria. Use fields from the `FactSchema` in the request body to filter retrieved facts.
*/
func (a *Client) GetAPIV2Facts(params *GetAPIV2FactsParams, opts ...ClientOption) (*GetAPIV2FactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2FactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2Facts",
		Method:             "GET",
		PathPattern:        "/api/v2/facts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2FactsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2FactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2Facts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2FactsOperationID retrieves facts by operation id

Retrieves facts associated with an operation. Returned facts will either be user-generated facts or learned facts.
*/
func (a *Client) GetAPIV2FactsOperationID(params *GetAPIV2FactsOperationIDParams, opts ...ClientOption) (*GetAPIV2FactsOperationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2FactsOperationIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2FactsOperationID",
		Method:             "GET",
		PathPattern:        "/api/v2/facts/{operation_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2FactsOperationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2FactsOperationIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2FactsOperationID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2Facts retrieves facts

Retrieve facts by criteria. Use fields from the `FactSchema` in the request body to filter retrieved facts.
*/
func (a *Client) HeadAPIV2Facts(params *HeadAPIV2FactsParams, opts ...ClientOption) (*HeadAPIV2FactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2FactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2Facts",
		Method:             "HEAD",
		PathPattern:        "/api/v2/facts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2FactsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2FactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2Facts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2FactsOperationID retrieves facts by operation id

Retrieves facts associated with an operation. Returned facts will either be user-generated facts or learned facts.
*/
func (a *Client) HeadAPIV2FactsOperationID(params *HeadAPIV2FactsOperationIDParams, opts ...ClientOption) (*HeadAPIV2FactsOperationIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2FactsOperationIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2FactsOperationID",
		Method:             "HEAD",
		PathPattern:        "/api/v2/facts/{operation_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2FactsOperationIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2FactsOperationIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2FactsOperationID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchAPIV2Facts updates one or more facts

Update existing facts using the format provided in the `FactSchema`. This will update all facts that match the criteria specified in the payload.
*/
func (a *Client) PatchAPIV2Facts(params *PatchAPIV2FactsParams, opts ...ClientOption) (*PatchAPIV2FactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIV2FactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIV2Facts",
		Method:             "PATCH",
		PathPattern:        "/api/v2/facts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPIV2FactsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIV2FactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIV2Facts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV2Facts creates a fact

Create a new fact using the format provided in the `FactSchema`.
*/
func (a *Client) PostAPIV2Facts(params *PostAPIV2FactsParams, opts ...ClientOption) (*PostAPIV2FactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2FactsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2Facts",
		Method:             "POST",
		PathPattern:        "/api/v2/facts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV2FactsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV2FactsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV2Facts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
