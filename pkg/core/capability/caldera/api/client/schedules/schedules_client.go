// Code generated by go-swagger; DO NOT EDIT.

package schedules

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new schedules API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new schedules API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new schedules API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for schedules API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteAPIV2SchedulesID(params *DeleteAPIV2SchedulesIDParams, opts ...ClientOption) (*DeleteAPIV2SchedulesIDOK, error)

	GetAPIV2Schedules(params *GetAPIV2SchedulesParams, opts ...ClientOption) (*GetAPIV2SchedulesOK, error)

	GetAPIV2SchedulesID(params *GetAPIV2SchedulesIDParams, opts ...ClientOption) (*GetAPIV2SchedulesIDOK, error)

	HeadAPIV2Schedules(params *HeadAPIV2SchedulesParams, opts ...ClientOption) (*HeadAPIV2SchedulesOK, error)

	HeadAPIV2SchedulesID(params *HeadAPIV2SchedulesIDParams, opts ...ClientOption) (*HeadAPIV2SchedulesIDOK, error)

	PatchAPIV2SchedulesID(params *PatchAPIV2SchedulesIDParams, opts ...ClientOption) (*PatchAPIV2SchedulesIDOK, error)

	PostAPIV2Schedules(params *PostAPIV2SchedulesParams, opts ...ClientOption) (*PostAPIV2SchedulesOK, error)

	PutAPIV2SchedulesID(params *PutAPIV2SchedulesIDParams, opts ...ClientOption) (*PutAPIV2SchedulesIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteAPIV2SchedulesID deletes schedule

Deletes a Schedule object from the data service.
*/
func (a *Client) DeleteAPIV2SchedulesID(params *DeleteAPIV2SchedulesIDParams, opts ...ClientOption) (*DeleteAPIV2SchedulesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIV2SchedulesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteAPIV2SchedulesID",
		Method:             "DELETE",
		PathPattern:        "/api/v2/schedules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteAPIV2SchedulesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAPIV2SchedulesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteAPIV2SchedulesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2Schedules retrieves schedules

Returns all stored schedules.
*/
func (a *Client) GetAPIV2Schedules(params *GetAPIV2SchedulesParams, opts ...ClientOption) (*GetAPIV2SchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2SchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2Schedules",
		Method:             "GET",
		PathPattern:        "/api/v2/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2SchedulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2SchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2Schedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetAPIV2SchedulesID retrieves schedule

Retrieves Schedule by UUID, as specified by {id} in the request url.
*/
func (a *Client) GetAPIV2SchedulesID(params *GetAPIV2SchedulesIDParams, opts ...ClientOption) (*GetAPIV2SchedulesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIV2SchedulesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetAPIV2SchedulesID",
		Method:             "GET",
		PathPattern:        "/api/v2/schedules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAPIV2SchedulesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAPIV2SchedulesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetAPIV2SchedulesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2Schedules retrieves schedules

Returns all stored schedules.
*/
func (a *Client) HeadAPIV2Schedules(params *HeadAPIV2SchedulesParams, opts ...ClientOption) (*HeadAPIV2SchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2SchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2Schedules",
		Method:             "HEAD",
		PathPattern:        "/api/v2/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2SchedulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2SchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2Schedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
HeadAPIV2SchedulesID retrieves schedule

Retrieves Schedule by UUID, as specified by {id} in the request url.
*/
func (a *Client) HeadAPIV2SchedulesID(params *HeadAPIV2SchedulesIDParams, opts ...ClientOption) (*HeadAPIV2SchedulesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHeadAPIV2SchedulesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "HeadAPIV2SchedulesID",
		Method:             "HEAD",
		PathPattern:        "/api/v2/schedules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &HeadAPIV2SchedulesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*HeadAPIV2SchedulesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for HeadAPIV2SchedulesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchAPIV2SchedulesID updates schedule

Use fields from the ScheduleSchema in the request body to update an existing Schedule.
*/
func (a *Client) PatchAPIV2SchedulesID(params *PatchAPIV2SchedulesIDParams, opts ...ClientOption) (*PatchAPIV2SchedulesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIV2SchedulesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PatchAPIV2SchedulesID",
		Method:             "PATCH",
		PathPattern:        "/api/v2/schedules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PatchAPIV2SchedulesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchAPIV2SchedulesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PatchAPIV2SchedulesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostAPIV2Schedules creates schedule

Use fields from the ScheduleSchema in the request body to create a new Schedule.
*/
func (a *Client) PostAPIV2Schedules(params *PostAPIV2SchedulesParams, opts ...ClientOption) (*PostAPIV2SchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV2SchedulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostAPIV2Schedules",
		Method:             "POST",
		PathPattern:        "/api/v2/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV2SchedulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV2SchedulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV2Schedules: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutAPIV2SchedulesID replaces schedule

Use fields from the ScheduleSchema in the request body to replace an existing Schedule or create a new Schedule.
*/
func (a *Client) PutAPIV2SchedulesID(params *PutAPIV2SchedulesIDParams, opts ...ClientOption) (*PutAPIV2SchedulesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIV2SchedulesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutAPIV2SchedulesID",
		Method:             "PUT",
		PathPattern:        "/api/v2/schedules/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PutAPIV2SchedulesIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutAPIV2SchedulesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutAPIV2SchedulesID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
